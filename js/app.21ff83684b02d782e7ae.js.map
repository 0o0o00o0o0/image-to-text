{"version":3,"sources":["webpack:///./src/component/Divide.jsx","webpack:///./src/component/Button.jsx","webpack:///./src/component/ResultModal.jsx","webpack:///./src/component/TransformSetting.jsx","webpack:///./src/component/Row.jsx","webpack:///./src/tools/execFunction.js","webpack:///./src/component/ImagePreviewUpload.jsx","webpack:///./src/tools/imageParser.js","webpack:///./src/App.jsx","webpack:///./src/index.js","webpack:///./src/tools/imageToText.js"],"names":["Divide","react_default","a","createElement","className","Button","props","children","attrs","_objectWithoutProperties","classnames_default","_extends","type","DEFAULT_PLAY_DELAY","ResultModal_ResultModal","ResultModal","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","updatePlayDelay","value","playDelayInput","current","nextNumber","length","parseInt","isNaN","setState","playDelay","close","ev","preventDefault","stop","open","play","state","playingIndex","playTimer","createRef","PureComponent","_this2","result","nextFrame","setTimeout","nextIndex","clearTimeout","modalClasses","modal","href","onClick","defaultValue","ref","placeholder","disabled","map","line","index","key","propTypes","prop_types_default","arrayOf","string","TransformSetting_TransformSetting","label","htmlFor","labelFor","defaultProps","Row","Row_objectWithoutProperties","Row_extends","execFunction","fn","_len","arguments","args","Array","_key","ImagePreviewUpload_ImagePreviewUpload","ImagePreviewUpload","ImagePreviewUpload_classCallCheck","ImagePreviewUpload_possibleConstructorReturn","dragEnter","onDragEnter","dragOver","onDragOver","dragLeave","onDragLeave","drop","onDrop","file","dataTransfer","files","previewImage","openFileInput","fileUpload","click","setFile","target","image","width","height","Component","match","reader","FileReader","readAsDataURL","addEventListener","Image","scaleImageContainer","src","alert","targetWidth","previewWidth","window","innerWidth","ratio","targetHeight","uploadBlockClasses","style","display","accept","onChange","func","number","IMAGE_TYPES_RE","PNG","JPG","GIF","getImageType","typeName","hasOwnProperty","test","gif","Promise","resolve","reject","dom_pixels_default","err","_image$shape","_slicedToArray","shape","frameNum","frames","perFramePixelsNum","data","i","startIndex","push","slice","jpg","_image$shape2","png","_image$shape3","imageParser","_ref","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","toUpperCase","abrupt","sent","_x","_x2","apply","TRANSFORM_TYPES","BORWSER","SERVER","App","App_classCallCheck","App_possibleConstructorReturn","setTransformType","transformType","setTransformWidth","transformWidth","toString","rescale","imagePreview","transform","transformByCanvas","transformByServer","transformResult","resultModal","getImage","getFile","imageDatas","imageData","imageToText_default","transformImageFrame","console","log","component_TransformSetting","name","id","component_ImagePreviewUpload","component_ResultModal","react_dom_default","render","src_App","document","getElementById","MAX_COLOR_PIXELS","DEFAULT_AVAILABLE_TEXTS","createGrayToTextFunc","texts","undefined","gray","charRange","module","exports","r","g","b","grayToText","dataArr","lines","h","w"],"mappings":"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","file":"js/app.21ff83684b02d782e7ae.js","sourcesContent":["import React from 'react'\n\n/**\n * 分割线组件\n *\n * @export\n * @returns\n */\nexport default function Divide() {\n  return <div className=\"divide\"></div>\n}","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 按钮组件\n *\n * @export\n * @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props\n * @returns\n */\nexport default function Button(props) {\n  let {children, className, ...attrs} = props\n  className = classNames(className, 'btn')\n  return <button {...attrs} type=\"button\" className={className}>{children}</button>\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport Button from './Button'\nimport Divide from './Divide'\nimport '../style/modal.css'\n\nconst DEFAULT_PLAY_DELAY = 200\n\nexport default class ResultModal extends React.PureComponent {\n\n  static propTypes = {\n    result: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))\n  }\n\n  constructor() {\n    super()\n    this.state = {\n      open: false,\n      playingIndex: 0,\n      playDelay: DEFAULT_PLAY_DELAY\n    }\n    this.playTimer = null\n    this.playDelayInput = React.createRef()\n  }\n\n  componentWillUnmount() {\n    // 组件销毁时，取消定时器\n    this.stop()\n  }\n\n  updatePlayDelay = () => {\n    const value = this.playDelayInput.current.value\n    // 退格到无数字时，设置为默认间隔\n    let nextNumber = value.length ? parseInt(value, 10) : DEFAULT_PLAY_DELAY\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      nextNumber = DEFAULT_PLAY_DELAY\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      playDelay: nextNumber\n    })\n  }\n\n  play() {\n    if (this.props.result.length <= 1) {\n      return\n    }\n    const nextFrame = () => {\n      this.playTimer = setTimeout(() => {\n        let nextIndex = this.state.playingIndex + 1\n        if (nextIndex === this.props.result.length) {\n          nextIndex = 0\n        }\n        this.setState({\n          playingIndex: nextIndex\n        })\n        nextFrame()\n      }, this.state.playDelay)\n    }\n    nextFrame()\n  }\n\n  stop() {\n    if (this.playTimer) {\n      clearTimeout(this.playTimer)\n    }\n  }\n\n  close = (ev) => {\n    ev.preventDefault()\n    this.stop()\n    this.setState({\n      open: false\n    })\n  }\n\n  open = () => {\n    this.play()\n    this.setState({\n      open: true\n    })\n  }\n\n  render() {\n    const modalClasses = classNames({\n      modal: true,\n      open: this.state.open\n    })\n    return (\n      <div className={modalClasses}>\n        <div className=\"modal-overlay\"></div>\n        <div className=\"modal-box\">\n          <div className=\"modal-header\">\n            <a href=\"#\" className=\"modal-close\" onClick={this.close}>X</a>\n            <h3 className=\"modal-title\">图片转化结果</h3>\n            <div className=\"output-options\">\n              <input defaultValue={DEFAULT_PLAY_DELAY} className=\"play-delay-input\" ref={this.playDelayInput} placeholder=\"播放帧间隔(ms)\" />\n              <Button className=\"update-btn\" onClick={this.updatePlayDelay}>更新间隔时间(ms)</Button>\n              <Button className=\"save-btn\" disabled>保存为图片</Button>\n            </div>\n          </div>\n          <Divide/>\n          <div className=\"output-text-wrapper\">\n            <div className=\"output-text-block\">\n              {this.props.result.length ? this.props.result[this.state.playingIndex].map((line, index) => <pre key={index}>{line}</pre>) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../style/transformSetting.css'\n\nexport default class TransformSetting extends React.PureComponent {\n  static propTypes = {\n    label: PropTypes.string,\n    labelFor: PropTypes.string\n  }\n\n  static defaultProps = {\n    label: '',\n    labelFor: ''\n  }\n\n  render() {\n    return (\n      <div className=\"transform-setting\">\n        {\n          this.props.label ? <label htmlFor={this.props.labelFor}>{this.props.label}</label> : null\n        }\n        {this.props.children}\n      </div>\n    )\n  }\n}","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 行组件\n *\n * @export\n * @param {React.HTMLAttributes<HTMLDivElement>} props\n * @returns\n */\nexport default function Row(props) {\n  let {children, className, ...attrs} = props\n  className = classNames(className, 'row')\n  return <div {...attrs} className={className}>{children}</div>\n}","\nexport function execFunction(fn, ...args) {\n  if (typeof fn === 'function') {\n    fn(...args)\n  }\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport '../style/imagePreviewUpload.css'\nimport { execFunction } from '../tools/execFunction'\n\nexport default class ImagePreviewUpload extends React.Component {\n\n  static propTypes = {\n    onDragEnter: PropTypes.func,\n    onDragOver: PropTypes.func,\n    onDragLeave: PropTypes.func,\n    onDrop: PropTypes.func,\n    previewWidth: PropTypes.number\n  }\n\n  constructor() {\n    super()\n    this.state = {\n      /**\n       * @type {File}\n       */\n      file: null,\n      /**\n       * @type {HTMLImageElement}\n       */\n      image: null,\n      width: 400,\n      height: 250\n    }\n\n    /**\n     * @type {React.RefObject<HTMLInputElement>}\n     */\n    this.fileUpload = React.createRef()\n  }\n\n  getFile() {\n    return this.state.file\n  }\n\n  getImage() {\n    return this.state.image\n  }\n\n  dragEnter = (ev) => {\n    ev.preventDefault()\n    execFunction(this.props.onDragEnter, ev)\n  }\n\n  dragOver = (ev) => {\n    ev.preventDefault()\n    execFunction(this.props.onDragOver, ev)\n  }\n\n  dragLeave = (ev) => {\n    ev.preventDefault()\n    execFunction(this.props.onDragLeave, ev)\n  }\n\n  drop = (ev) => {\n    ev.preventDefault()\n    execFunction(this.props.onDrop, ev)\n    const file = ev.dataTransfer.files[0]\n    this.previewImage(file)\n  }\n\n  /**\n   * 预览图片文件\n   *\n   * @param {File} file\n   * @memberof ImagePreviewUpload\n   */\n  previewImage(file) {\n    if (!file.type.match(/image\\/.*/)) {\n      alert('请选择图片文件')\n      return\n    }\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.addEventListener('load', () => {\n      const image = new Image()\n      image.addEventListener('load', () => {\n        this.scaleImageContainer(image)\n        this.setState({\n          file: file,\n          image: image\n        })\n      })\n      image.src = reader.result\n    })\n  }\n\n  /**\n   * 等比例缩放图片尺寸\n   *\n   * @param {HTMLImageElement} image\n   */\n  scaleImageContainer(image) {\n    if (!image) {\n      // 不传递image时，使用当前的image（App组件调用）\n      image = this.state.image\n    }\n    let targetWidth = this.props.previewWidth\n    if (!targetWidth) {\n      // 没有指定宽度, 使用容器宽度\n      targetWidth = window.innerWidth\n      // 容器宽度比图片原宽度大，使用图片原宽度\n      if (image.width < targetWidth) {\n        targetWidth = image.width\n      }\n    }\n    const ratio = image.width / targetWidth\n    const targetHeight = image.height / ratio\n    this.setState({\n      width: targetWidth,\n      height: targetHeight\n    })\n  }\n\n  openFileInput = () => {\n    this.fileUpload.current.click()\n  }\n\n  setFile = (ev) => {\n    const file = ev.target.files[0]\n    if (file) {\n      this.previewImage(file)\n    }\n  }\n\n  render() {\n    const uploadBlockClasses = classNames('upload-image-block', this.props.className)\n    return (\n      <div onDragEnter={this.dragEnter} onDragOver={this.dragOver} onDragLeave={this.dragLeave} onDrop={this.drop} onClick={this.openFileInput} className={uploadBlockClasses} style={{width: this.state.width, height: this.state.height}}>\n        <input type=\"file\" style={{display: 'none'}} accept=\"image/*\" ref={this.fileUpload} onChange={this.setFile} />\n        <span className=\"upload-label\">上传图片</span>\n        {\n          this.state.image ? <img src={this.state.image.src} className=\"preview-image\" /> : null\n        }\n      </div>\n    )\n  }\n}","import getPixels from 'get-pixels'\n\nconst IMAGE_TYPES_RE = {\n  PNG: /image\\/png/,\n  JPG: /image\\/jpe?g/,\n  GIF: /image\\/gif/\n}\n\n// /**\n//  * 获取图像信息\n//  *\n//  * @export\n//  * @param {HTMLImageElement} image\n//  * @returns\n//  */\n// function canvasFrameDataGetter (image) {\n//   const canvas = document.createElement('canvas')\n//   const ctx = canvas.getContext('2d')\n//   const ratio = image.width / image.naturalWidth\n//   // 将画布内容缩放到与当前图像一致\n//   ctx.scale(ratio, ratio)\n//   if (ratio > 1) {\n//     // 预览图放大，设置canvas宽高与当前图像相同\n//     canvas.width = image.width\n//     canvas.height = image.height\n//   } else {\n//     // 预览图缩小，设置canvas宽高与原始图像相同\n//     canvas.width = image.naturalWidth\n//     canvas.height = image.naturalHeight\n//   }\n//   // 绘制当前图像到canvas上\n//   ctx.drawImage(image, 0, 0, image.width, image.height)\n//   // 获取图像信息(宽高与当前图像相同)\n//   const imageData = ctx.getImageData(0, 0, image.width, image.height)\n//   return [imageData]\n// }\n\n/**\n * 获取图片类型(png, jpg, gif)\n *\n * @param {string} type\n * @returns\n */\nfunction getImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    if (IMAGE_TYPES_RE.hasOwnProperty(typeName)) {\n      const typeRe = IMAGE_TYPES_RE[typeName]\n      if (typeRe.test(type)) {\n        return typeName\n      }\n    }\n  }\n}\n\n/**\n * 获取gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns {Promise<ImageData[]>}\n */\nfunction gif(image) {\n  return new Promise((resolve, reject) => {\n    function cb(err, image) {\n      if (err) {\n        reject(err)\n        return\n      }\n      const [frameNum, width, height] = image.shape\n      const frames = []\n      const perFramePixelsNum = image.data.length / frameNum\n      for (let i = 0; i < frameNum; i++) {\n        const startIndex = i * perFramePixelsNum\n        frames.push({\n          width, height, data: image.data.slice(startIndex, startIndex + perFramePixelsNum)\n        })\n      }\n      resolve(frames)\n    }\n\n    getPixels(image.src, cb)\n  })\n}\n\n/**\n * 获取jpg图像信息\n *\n * @param {HTMLImageElement} image\n * @returns {Promise<ImageData[]>}\n */\nfunction jpg(image) {\n  return new Promise((resolve, reject) => {\n    function cb (err, image) {\n      if (err) {\n        reject(err)\n        return\n      }\n      const [width, height] = image.shape\n      resolve([{\n        width,\n        height,\n        data: image.data\n      }])\n    }\n\n    getPixels(image.src, cb)\n  })\n}\n\n/**\n * 获取png图像信息\n *\n * @param {HTMLImageElement} image\n * @returns {Promise<ImageData[]>}\n */\nfunction png(image) {\n  return new Promise((resolve, reject) => {\n    function cb (err, image) {\n      if (err) {\n        reject(err)\n        return\n      }\n      const [width, height] = image.shape\n      resolve([{\n        width,\n        height,\n        data: image.data\n      }])\n    }\n\n    getPixels(image.src, cb)\n  })\n}\n\n/**\n * 获取图像信息\n *\n * @export\n * @param {HTMLImageElement} image\n * @param {File} file\n * @returns {Promise<ImageData[]>}\n */\nexport default async function getImageDatas(image, file) {\n  const type = getImageType(file.type)\n  switch (type.toUpperCase()) {\n    case 'PNG':\n      return await png(image)\n    case 'JPG':\n      return await jpg(image)\n    case 'GIF':\n      return await gif(image)\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport Divide from './component/Divide'\nimport Button from './component/Button'\nimport ResultModal from './component/ResultModal'\nimport TransformSetting from './component/TransformSetting'\nimport Row from './component/Row'\nimport ImagePreviewUpload from './component/ImagePreviewUpload'\nimport imageToText from './tools/imageToText'\nimport imageParser from './tools/imageParser'\n\nconst TRANSFORM_TYPES = {\n  BORWSER: 'browser',\n  SERVER: 'server',\n}\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      transformType: 'browser',\n      transformWidth: '',\n      transformResult: []\n    }\n    this.imagePreview = React.createRef()\n    this.resultModal = React.createRef()\n  }\n\n  setTransformType = (ev) => {\n    this.setState({\n      transformType: ev.target.value\n    })\n  }\n\n  setTransformWidth = (ev) => {\n    const value = ev.target.value\n    // 退格到无数字时，设置为0\n    const nextNumber = value.length ? parseInt(value, 10) : 0\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      return\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      transformWidth: nextNumber.toString()\n    })\n  }\n\n  rescale = () => {\n    this.imagePreview.current.scaleImageContainer()\n  }\n\n  transform = () => {\n    switch (this.state.transformType) {\n      case TRANSFORM_TYPES.BORWSER:\n        this.transformByCanvas()\n        break\n      case TRANSFORM_TYPES.SERVER:\n        this.transformByServer()\n        break\n      default:\n        break\n    }\n  }\n\n  /**\n   * 用Canvas来实现图片转字符\n   *\n   * @memberof App\n   */\n  async transformByCanvas() {\n    /**\n     * @type {HTMLImageElement}\n     */\n    const image = this.imagePreview.current.getImage()\n    const file = this.imagePreview.current.getFile()\n    const imageDatas = await imageParser(image, file)\n    const frames = imageDatas.map(imageData => {\n      return imageToText.transformImageFrame(imageData)\n    })\n    this.setState({\n      transformResult: frames\n    }, () => {\n      this.resultModal.current.open()\n    })\n  }\n\n  /**\n   * 由服务器来实现图片转字符\n   *\n   * @memberof App\n   */\n  transformByServer() {\n    console.log('transformByServer')\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1 className=\"text-center\">图片转字符画工具</h1>\n        </header>\n        <Divide/>\n        <Row className=\"transform-settings-wrapper\">\n          <TransformSetting label=\"转化方式:\" labelFor=\"transform-type\">\n            <select name=\"transform-type\" id=\"transform-type\" onChange={this.setTransformType} value={this.state.transformType}>\n              <option value={TRANSFORM_TYPES.BORWSER}>浏览器</option>\n              <option value={TRANSFORM_TYPES.SERVER}>服务器</option>\n            </select>\n          </TransformSetting>\n          <TransformSetting label=\"目标图片宽度:\" labelFor=\"transform-size\">\n            <input type=\"number\" id=\"transform-size\" className=\"transform-size-input\" name=\"transform-size\" value={this.state.transformWidth} onChange={this.setTransformWidth} />\n          </TransformSetting>\n          <Button onClick={this.rescale}>重新缩放</Button>\n          <Button onClick={this.transform}>开始转化</Button>\n        </Row>\n        <Divide/>\n        <Row>\n          <ImagePreviewUpload previewWidth={parseInt(this.state.transformWidth)} ref={this.imagePreview}></ImagePreviewUpload>\n        </Row>\n        <ResultModal ref={this.resultModal} result={this.state.transformResult} />\n      </div>\n    )\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './style/normalize.css'\nimport './style/index.css'\n\nif (module.hot) {\n  module.hot.accept()\n}\n\nReactDOM.render(<App />, document.getElementById('app'))\n","/**\n * 获取rbg颜色的灰度\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @returns\n */\nfunction rgbToGray(r, g, b) {\n  return 0.299 * r + 0.578 * g + 0.114 * b\n}\n\nconst MAX_COLOR_PIXELS = 255\nconst DEFAULT_AVAILABLE_TEXTS = '@#&$%O!~;*^+-. '\n/**\n * 灰度转字符函数生成器\n *\n * @param {string | Array<string>} texts\n * @returns\n */\nfunction createGrayToTextFunc(texts = DEFAULT_AVAILABLE_TEXTS) {\n  /**\n   * 灰度转字符函数\n   *\n   * @param {number} gray\n   * @returns\n   */\n  function grayToText(gray) {\n    const charRange = MAX_COLOR_PIXELS / texts.length\n    return texts[(gray / charRange) >> 0][0] // 只取第一个字符\n  }\n\n  return grayToText\n}\n\n/**\n * 将图像的一帧转成字符数组\n *\n * @param {ImageData} imageData\n * @param {Function} [grayToText=defaultGrayToText]\n * @returns\n */\nfunction transformImageFrame(imageData, grayToText = createGrayToTextFunc()) {\n  const dataArr = imageData.data\n  const width = imageData.width\n  const height = imageData.height\n  const lines = []\n  for (let h = 0; h < height; h += 12) {\n    let line = ''\n    for (let w = 0; w < width; w += 6) {\n      const i = (w + width * h) * 4\n      const gray = rgbToGray(dataArr[i], dataArr[i + 1], dataArr[i + 2])\n      line += grayToText(gray)\n    }\n    lines.push(line)\n  }\n  return lines\n}\n\nmodule.exports = {\n  createGrayToTextFunc,\n  transformImageFrame\n}\n"],"sourceRoot":""}