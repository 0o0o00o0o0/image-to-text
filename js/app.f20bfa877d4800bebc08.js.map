{"version":3,"sources":["webpack:///./src/component/Divide.jsx","webpack:///./src/component/Button.jsx","webpack:///./src/tools/imageCommon.js","webpack:///./src/tools/imageCreater.js","webpack:///./src/component/FramesModal.jsx","webpack:///./src/component/TransformSetting.jsx","webpack:///./src/component/Row.jsx","webpack:///./src/component/ImagePreviewUpload.jsx","webpack:///./src/tools/imageToText.js","webpack:///./src/tools/imageParser.js","webpack:///./src/App.jsx","webpack:///./src/index.js"],"names":["Divide","react_default","a","createElement","className","Button","props","children","attrs","_objectWithoutProperties","classnames_default","_extends","type","IMAGE_TYPES_RE","PNG","JPG","GIF","getImageType","typeName","hasOwnProperty","test","TEXT_LINE_HEIGHT","TEXT_WIDTH","TEXT_FONT","createImage","div","frames","file","console","log","gif","frame","canvas","document","style","getComputedStyle","width","parseInt","height","ctx","getContext","font","i","length","j","fillText","toDataURL","noGif","DEFAULT_PLAY_DELAY","FramesModal","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","savePic","outputRef","current","updatePlayDelay","value","playDelayInput","nextNumber","isNaN","setState","playDelay","close","ev","preventDefault","stop","open","play","state","playingIndex","playTimer","createRef","PureComponent","_this2","nextFrame","setTimeout","nextIndex","clearTimeout","modalClasses","modal","href","onClick","defaultValue","ref","placeholder","id","map","line","index","key","TransformSetting_TransformSetting","label","htmlFor","labelFor","propTypes","prop_types_default","string","defaultProps","Row","Row_objectWithoutProperties","Row_extends","ImagePreviewUpload","ImagePreviewUpload_classCallCheck","ImagePreviewUpload_possibleConstructorReturn","size","dragEnter","isDragging","dragOver","dragLeave","drop","dataTransfer","files","previewImage","openFileInput","fileUpload","click","setFile","target","currentImageRef","Component","checkImageType","reader","FileReader","readAsDataURL","addEventListener","image","Image","scaleImageContainer","setImageAndFile","src","result","alert","targetWidth","previewWidth","window","innerWidth","ratio","targetHeight","uploadBlockClasses","active","onDragEnter","onDragOver","onDragLeave","onDrop","display","accept","onChange","MAX_COLOR_PIXELS","DEFAULT_AVAILABLE_TEXTS","transformImageFrame","imageData","r","g","b","grayToText","arguments","undefined","texts","gray","charRange","createGrayToTextFunc","dataArr","data","lines","h","w","push","getImageDatas","toUpperCase","parse_data_uri_default","gifReader","omggif","framesNum","numFrames","rawWidth","rawHeight","framePixels","Uint8Array","decodeAndBlitFrameRGBA","imageParser_gif","naturalWidth","scale","naturalHeight","drawImage","getImageData","imageParser_noGif","App","App_classCallCheck","App_possibleConstructorReturn","rawImage","setTransformType","transformType","setTransformWidth","transformWidth","toString","rescale","imagePreview","transform","getCurrentImage","transformResult","framesModal","component_TransformSetting","name","component_ImagePreviewUpload","component_FramesModal","react_dom_default","render","src_App","getElementById"],"mappings":"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","file":"js/app.f20bfa877d4800bebc08.js","sourcesContent":["import React from 'react'\n\n/**\n * 分割线组件\n *\n * @export\n * @returns\n */\nexport default function Divide() {\n  return <div className=\"divide\" />\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 按钮组件\n *\n * @export\n * @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props\n * @returns\n */\nexport default function Button(props) {\n  let { children, className, ...attrs } = props\n  className = classNames(className, 'btn')\n  return (\n    <button {...attrs} type=\"button\" className={className}>\n      {children}\n    </button>\n  )\n}\n","const IMAGE_TYPES_RE = {\n  PNG: /image\\/png/,\n  JPG: /image\\/jpe?g/,\n  GIF: /image\\/gif/,\n}\n\n/**\n * 获取图片类型(png, jpg, gif)\n *\n * @param {string} type\n * @returns\n */\nexport function getImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    if (IMAGE_TYPES_RE.hasOwnProperty(typeName)) {\n      const typeRe = IMAGE_TYPES_RE[typeName]\n      if (typeRe.test(type)) {\n        return typeName\n      }\n    }\n  }\n}\n\nexport function checkImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    if (IMAGE_TYPES_RE.hasOwnProperty(typeName)) {\n      const typeRe = IMAGE_TYPES_RE[typeName]\n      if (typeRe.test(type)) {\n        return true\n      }\n    }\n  }\n  return false\n}","// import { GIFEncoder } from 'gif.js'\nimport { getImageType } from './imageCommon'\n\n/**\n * 创建gif图片\n *\n * @param {HTMLDivElement} div\n * @param {string[][]} frames\n * @returns\n */\nfunction gif(div, frames) {\n  console.log(frames)\n  console.log('To Be Continue...')\n}\n\nconst TEXT_LINE_HEIGHT = 12\nconst TEXT_WIDTH = 6\nconst TEXT_FONT = 'normal normal 400 normal 12px / 12px monospace, monospace'\n/**\n * 创建非gif图片(jpg)\n *\n * @param {HTMLDivElement} div\n * @param {string[]} frame\n * @returns\n */\nfunction noGif(div, frame) {\n  const canvas = document.createElement('canvas')\n  const style = getComputedStyle(div)\n  canvas.width = parseInt(style.width)\n  canvas.height = parseInt(style.height)\n  const ctx = canvas.getContext('2d')\n  ctx.font = TEXT_FONT\n  for (let i = 0; i < frame.length; i++) {\n    for (let j = 0; j < frame[i].length; j++) {\n      ctx.fillText(frame[i][j], j * TEXT_WIDTH, i * TEXT_LINE_HEIGHT)\n    }\n  }\n  return canvas.toDataURL('image/jpg')\n}\n\n/**\n * 创建新的图片\n *\n * @export\n * @param {HTMLDivElement} div\n * @param {string[][]} frames\n * @param {File} file\n */\nexport function createImage(div, frames, file) {\n  const type = getImageType(file.type)\n  if (type === 'GIF') {\n    gif(div, frames)\n  } else {\n    noGif(div, frames[0])\n  }\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport Button from './Button'\nimport Divide from './Divide'\nimport { createImage } from '../tools/imageCreater'\nimport '../style/modal.css'\n\nconst DEFAULT_PLAY_DELAY = 200\n\n/**\n * 显示图片转字符结果的模态框\n *\n * @export\n * @class FramesModal\n * @extends {React.PureComponent}\n */\nexport default class FramesModal extends React.PureComponent {\n\n  /**\n   * Creates an instance of FramesModal.\n   *\n   * @param {object} props\n   * @param {string[][]} props.frames\n   * @param {File} props.file\n   *\n   * @memberof FramesModal\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      open: false,\n      playingIndex: 0,\n      playDelay: DEFAULT_PLAY_DELAY\n    }\n    this.playTimer = null\n    this.playDelayInput = React.createRef()\n    this.outputRef = React.createRef()\n  }\n\n  componentWillUnmount() {\n    // 组件销毁时，取消定时器\n    this.stop()\n  }\n\n  /**\n   * 保存图片为文件\n   *\n   * @memberof FramesModal\n   */\n  savePic = () => {\n    createImage(this.outputRef.current, this.props.frames, this.props.file)\n  }\n\n  updatePlayDelay = () => {\n    const value = this.playDelayInput.current.value\n    // 退格到无数字时，设置为默认间隔\n    let nextNumber = value.length ? parseInt(value, 10) : DEFAULT_PLAY_DELAY\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      nextNumber = DEFAULT_PLAY_DELAY\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      playDelay: nextNumber\n    })\n  }\n\n  play() {\n    if (this.props.frames.length <= 1) {\n      return\n    }\n    const nextFrame = () => {\n      this.playTimer = setTimeout(() => {\n        let nextIndex = this.state.playingIndex + 1\n        if (nextIndex === this.props.frames.length) {\n          nextIndex = 0\n        }\n        this.setState({\n          playingIndex: nextIndex\n        })\n        nextFrame()\n      }, this.state.playDelay)\n    }\n    nextFrame()\n  }\n\n  stop() {\n    if (this.playTimer) {\n      clearTimeout(this.playTimer)\n    }\n  }\n\n  close = ev => {\n    ev.preventDefault()\n    this.stop()\n    this.setState({\n      open: false\n    })\n  }\n\n  open = () => {\n    this.play()\n    this.setState({\n      open: true\n    })\n  }\n\n  render() {\n    const modalClasses = classNames({\n      modal: true,\n      open: this.state.open\n    })\n    return (\n      <div className={modalClasses}>\n        <div className=\"modal-overlay\" />\n        <div className=\"modal-box\">\n          <div className=\"modal-header\">\n            <a href=\"#\" className=\"modal-close\" onClick={this.close}>X</a>\n            <h3 className=\"modal-title\">图片转化结果</h3>\n          </div>\n          <Divide />\n          <div className=\"output-options\">\n            {this.props.file && this.props.file.type === 'image/gif' ?\n              <span>\n                <input\n                  defaultValue={DEFAULT_PLAY_DELAY}\n                  className=\"play-delay-input\"\n                  ref={this.playDelayInput}\n                  placeholder=\"播放帧间隔(ms)\" />\n                <Button className=\"update-btn\" onClick={this.updatePlayDelay}>\n                  更新间隔时间(ms)\n                </Button>\n              </span>: null\n            }\n            <Button className=\"save-btn\" onClick={this.savePic}>\n              保存为图片\n            </Button>\n          </div>\n          <Divide />\n          <div className=\"output-text-wrapper\">\n            <div id=\"output-text-block\" className=\"output-text-block\" ref={this.outputRef}>\n              {this.props.frames.length\n                ? this.props.frames[this.state.playingIndex].map((line, index) => <pre key={index}>{line}</pre>)\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../style/transformSetting.css'\n\nexport default class TransformSetting extends React.PureComponent {\n  static propTypes = {\n    label: PropTypes.string,\n    labelFor: PropTypes.string\n  }\n\n  static defaultProps = {\n    label: '',\n    labelFor: ''\n  }\n\n  render() {\n    return (\n      <div className=\"transform-setting\">\n        {this.props.label ? <label htmlFor={this.props.labelFor}>{this.props.label}</label> : null}\n        {this.props.children}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 行组件\n *\n * @export\n * @param {React.HTMLAttributes<HTMLDivElement>} props\n * @returns\n */\nexport default function Row(props) {\n  let { children, className, ...attrs } = props\n  className = classNames(className, 'row')\n  return (\n    <div {...attrs} className={className}>\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport { checkImageType } from '../tools/imageCommon'\nimport '../style/imagePreviewUpload.css'\n/**\n * 图片上传预览组件\n *\n * @export\n * @class ImagePreviewUpload\n * @extends {React.Component}\n */\nexport default class ImagePreviewUpload extends React.Component {\n\n  /**\n   * Creates an instance of ImagePreviewUpload.\n   *\n   * @param {object} props\n   * @param {HTMLImageElement} props.image\n   * @param {File} props.file\n   * @param {number} props.previewWidth\n   * @param {Function} props.setImageAndFile\n   *\n   * @memberof ImagePreviewUpload\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      isDragging: false,\n      width: 400,\n      height: 250\n    }\n\n    /**\n     * @type {React.RefObject<HTMLInputElement>}\n     */\n    this.fileUpload = React.createRef()\n    this.currentImageRef = React.createRef()\n  }\n\n  getCurrentImage() {\n    return this.currentImageRef.current\n  }\n\n  size = () => {\n    return {\n      width: this.state.width,\n      height: this.state.height\n    }\n  }\n\n  dragEnter = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: true\n    })\n  }\n\n  dragOver = ev => {\n    ev.preventDefault()\n  }\n\n  dragLeave = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: false\n    })\n  }\n\n  drop = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: false\n    })\n    const file = ev.dataTransfer.files[0]\n    this.previewImage(file)\n  }\n\n  openFileInput = () => {\n    this.fileUpload.current.click()\n  }\n\n  setFile = ev => {\n    const file = ev.target.files[0]\n    if (file) {\n      this.previewImage(file)\n    }\n  }\n\n  /**\n   * 预览图片文件\n   *\n   * @param {File} file\n   * @memberof ImagePreviewUpload\n   */\n  previewImage(file) {\n    if (!checkImageType(file.type)) {\n      alert('不支持该格式的文件')\n      return\n    }\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.addEventListener('load', () => {\n      const image = new Image()\n      image.addEventListener('load', () => {\n        this.scaleImageContainer(image)\n        this.props.setImageAndFile(image, file)\n      })\n      image.src = reader.result\n    })\n  }\n\n  /**\n   * 等比例缩放图片尺寸\n   *\n   * @param {HTMLImageElement} image\n   */\n  scaleImageContainer(image) {\n    if (!image) {\n      // 不传递image时，使用当前的image（App组件传递）\n      image = this.props.image\n    }\n    let targetWidth = this.props.previewWidth\n    if (!targetWidth) {\n      // 没有指定宽度, 使用容器宽度\n      targetWidth = window.innerWidth\n      // 容器宽度比图片原宽度大，使用图片原宽度\n      if (image.width < targetWidth) {\n        targetWidth = image.width\n      }\n    }\n    const ratio = image.width / targetWidth\n    const targetHeight = image.height / ratio\n    this.setState({\n      width: targetWidth,\n      height: targetHeight\n    })\n  }\n\n  render() {\n    const uploadBlockClasses = classNames('upload-image-block', {active: this.state.isDragging}, this.props.className)\n    return (\n      <div\n        onDragEnter={this.dragEnter}\n        onDragOver={this.dragOver}\n        onDragLeave={this.dragLeave}\n        onDrop={this.drop}\n        onClick={this.openFileInput}\n        className={uploadBlockClasses}\n        style={{ width: this.state.width, height: this.state.height }}\n      >\n        <input type=\"file\" style={{ display: 'none' }} accept=\"image/*\" ref={this.fileUpload} onChange={this.setFile} />\n        <span className=\"upload-label\">上传图片</span>\n        {this.props.image ? <img ref={this.currentImageRef} src={this.props.image.src} className=\"preview-image\" /> : null}\n      </div>\n    )\n  }\n}\n","/**\n * 获取rbg颜色的灰度\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @returns\n */\nfunction rgbToGray(r, g, b) {\n  return 0.299 * r + 0.578 * g + 0.114 * b\n}\n\nconst MAX_COLOR_PIXELS = 255\nconst DEFAULT_AVAILABLE_TEXTS = '@#&$%O!~;*^+-. '\n/**\n * 灰度转字符函数生成器\n *\n * @param {string | Array<string>} texts\n * @returns\n */\nexport function createGrayToTextFunc(texts = DEFAULT_AVAILABLE_TEXTS) {\n  /**\n   * 灰度转字符函数\n   *\n   * @param {number} gray\n   * @returns\n   */\n  function grayToText(gray) {\n    const charRange = MAX_COLOR_PIXELS / texts.length\n    return texts[(gray / charRange) >> 0][0] // 只取第一个字符\n  }\n\n  return grayToText\n}\n\n/**\n * 将图像的一帧转成字符数组\n *\n * @param {ImageData} imageData\n * @param {Function} [grayToText=defaultGrayToText]\n * @returns\n */\nexport function transformImageFrame(imageData, grayToText = createGrayToTextFunc()) {\n  const dataArr = imageData.data\n  const width = imageData.width\n  const height = imageData.height\n  const lines = []\n  for (let h = 0; h < height; h += 12) {\n    let line = ''\n    for (let w = 0; w < width; w += 6) {\n      const i = (w + width * h) * 4\n      const gray = rgbToGray(dataArr[i], dataArr[i + 1], dataArr[i + 2])\n      line += grayToText(gray)\n    }\n    lines.push(line)\n  }\n  return lines\n}\n","import { GifReader } from 'omggif'\nimport parseDataUri from 'parse-data-uri'\nimport { getImageType } from './imageCommon'\n\n/**\n * 获取gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction gif(image) {\n  const { data } = parseDataUri(image.src)\n  const gifReader = new GifReader(data)\n  const framesNum = gifReader.numFrames()\n  const { width: rawWidth, height: rawHeight } = gifReader\n  const GIF_COLOR_DEPTH = 4\n  const frames = []\n  for(let i = 0; i < framesNum; i++) {\n    const framePixels = new Uint8Array(rawWidth * rawHeight * GIF_COLOR_DEPTH)\n    gifReader.decodeAndBlitFrameRGBA(i, framePixels)\n    frames.push({\n      width: rawWidth,\n      height: rawHeight,\n      data: framePixels\n    })\n  }\n  console.log(frames)\n  return frames\n}\n\n/**\n * 获取非gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction noGif(image) {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  const ratio = image.width / image.naturalWidth\n  // 将画布内容缩放到与当前图像一致\n  ctx.scale(ratio, ratio)\n  if (ratio > 1) {\n    // 预览图放大，设置canvas宽高与当前图像相同\n    canvas.width = image.width\n    canvas.height = image.height\n  } else {\n    // 预览图缩小，设置canvas宽高与原始图像相同\n    canvas.width = image.naturalWidth\n    canvas.height = image.naturalHeight\n  }\n  // 绘制当前图像到canvas上\n  ctx.drawImage(image, 0, 0, image.width, image.height)\n  // 获取图像信息(宽高与当前图像相同)\n  const imageData = ctx.getImageData(0, 0, image.width, image.height)\n  return [imageData]\n}\n\n\n/**\n * 获取图像信息\n *\n * @export\n * @param {HTMLImageElement} image\n * @param {File} file\n * @returns\n */\nexport function getImageDatas(image, file) {\n  const type = getImageType(file.type)\n  switch (type.toUpperCase()) {\n    case 'GIF':\n      return gif(image)\n    case 'PNG':\n    case 'JPG':\n      return noGif(image)\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport Divide from './component/Divide'\nimport Button from './component/Button'\nimport FramesModal from './component/FramesModal'\nimport TransformSetting from './component/TransformSetting'\nimport Row from './component/Row'\nimport ImagePreviewUpload from './component/ImagePreviewUpload'\nimport { transformImageFrame } from './tools/imageToText'\nimport { getImageDatas } from './tools/imageParser'\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      transformWidth: '',\n      transformResult: [],\n      rawImage: null,\n      file: null\n    }\n    this.imagePreview = React.createRef()\n    this.framesModal = React.createRef()\n  }\n\n  setImageAndFile = (rawImage, file) => {\n    this.setState({rawImage, file})\n  }\n\n  setTransformType = (ev) => {\n    this.setState({\n      transformType: ev.target.value\n    })\n  }\n\n  setTransformWidth = (ev) => {\n    const value = ev.target.value\n    // 退格到无数字时，设置为0\n    const nextNumber = value.length ? parseInt(value, 10) : 0\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      return\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      transformWidth: nextNumber.toString()\n    })\n  }\n\n  rescale = () => {\n    this.imagePreview.current.scaleImageContainer()\n  }\n\n  /**\n   * 图片转字符\n   *\n   * @memberof App\n   */\n  transform = () => {\n    /**\n     * @type {HTMLImageElement}\n     */\n    const image = this.imagePreview.current.getCurrentImage()\n    const file = this.state.file\n    const imageDatas = getImageDatas(image, file)\n    const frames = imageDatas.map(imageData => {\n      return transformImageFrame(imageData)\n    })\n    this.setState({\n      transformResult: frames\n    }, () => {\n      this.framesModal.current.open()\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1 className=\"text-center\">图片转字符画工具</h1>\n        </header>\n        <Divide/>\n        <Row className=\"transform-settings-wrapper\">\n          <TransformSetting label=\"目标图片宽度:\" labelFor=\"transform-size\">\n            <input type=\"number\" id=\"transform-size\" className=\"transform-size-input\" name=\"transform-size\" value={this.state.transformWidth} onChange={this.setTransformWidth} />\n          </TransformSetting>\n          {/* <TransformSetting label=\"是否着色:\" labelFor=\"transform-color\">\n            <input type=\"checkbox\" id=\"transform-color\" className=\"transform-color-checkbox\" name=\"transform-color\" value={this.state.transformColor} onChange={this.setTransformColor} />\n          </TransformSetting> */}\n          <Button onClick={this.rescale}>重新缩放</Button>\n          <Button onClick={this.transform}>开始转化</Button>\n        </Row>\n        <Divide/>\n        <Row>\n          <ImagePreviewUpload file={this.state.file} image={this.state.rawImage} setImageAndFile={this.setImageAndFile} previewWidth={parseInt(this.state.transformWidth)} ref={this.imagePreview}></ImagePreviewUpload>\n        </Row>\n        <FramesModal ref={this.framesModal} frames={this.state.transformResult} file={this.state.file} />\n      </div>\n    )\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './style/normalize.css'\nimport './style/index.css'\n\nif (module.hot) {\n  module.hot.accept()\n}\n\nReactDOM.render(<App />, document.getElementById('app'))\n"],"sourceRoot":""}