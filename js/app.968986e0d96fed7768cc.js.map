{"version":3,"sources":["webpack:///./src/component/Divide.jsx","webpack:///./src/component/Button.jsx","webpack:///./src/tools/imageCommon.js","webpack:///./src/tools/imageCreater.js","webpack:///./src/component/FramesModal.jsx","webpack:///./src/component/TransformSetting.jsx","webpack:///./src/component/Row.jsx","webpack:///./src/component/ImagePreviewUpload.jsx","webpack:///./src/tools/imageToText.js","webpack:///./src/tools/gifParser.js","webpack:///./src/tools/imageParser.js","webpack:///./src/tools/datauri.js","webpack:///./src/App.jsx","webpack:///./src/index.js"],"names":["Divide","react_default","a","createElement","className","Button","props","children","attrs","_objectWithoutProperties","classnames_default","_extends","type","IMAGE_TYPES_RE","PNG","JPG","GIF","getImageType","typeName","hasOwnProperty","test","TEXT_LINE_HEIGHT","TEXT_WIDTH","TEXT_FONT","COLOR","getFrameCanvas","div","frame","canvas","document","width","scrollWidth","height","scrollHeight","ctx","getContext","fillStyle","bgColor","fillRect","color","font","i","length","j","fillText","DEFAULT_GIF_PROPS","delay","DEFAULT_NOGIF_PROPS","createImage","option","frames","file","imageCreater_objectWithoutProperties","link","filename","name","split","join","download","cb","Object","assign","gif","gif_default","quality","workers","workerScript","on","blob","addFrame","render","console","log","imageCreater_gif","url","URL","createObjectURL","href","click","revokeObjectURL","toDataURL","noGif","DEFAULT_PLAY_DELAY","FramesModal","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","savePic","outputRef","current","state","playDelay","updatePlayDelay","value","playDelayInput","nextNumber","parseInt","isNaN","setState","close","ev","preventDefault","stop","open","play","frameIndex","playTimer","createRef","PureComponent","_this2","nextFrame","setTimeout","nextIndex","clearTimeout","modalClasses","modal","onClick","defaultValue","ref","placeholder","id","map","line","index","key","nextProps","TransformSetting_TransformSetting","label","htmlFor","labelFor","propTypes","prop_types_default","string","defaultProps","Row","Row_objectWithoutProperties","Row_extends","ImagePreviewUpload","ImagePreviewUpload_classCallCheck","ImagePreviewUpload_possibleConstructorReturn","size","dragEnter","isDragging","dragOver","dragLeave","drop","dataTransfer","files","previewImage","openFileInput","fileUpload","setFile","target","currentImageRef","componentRef","Component","checkImageType","reader","FileReader","readAsDataURL","addEventListener","image","Image","scaleImageContainer","setImageAndFile","src","result","alert","container","parentElement","targetWidth","previewWidth","clientWidth","ratio","targetHeight","uploadBlockClasses","active","onDragEnter","onDragOver","onDragLeave","onDrop","style","display","accept","onChange","MAX_COLOR_PIXELS","DEFAULT_AVAILABLE_TEXTS","transformImageFrame","imageData","r","g","b","grayToText","arguments","undefined","texts","gray","charRange","createGrayToTextFunc","dataArr","data","lines","h","w","push","gifParser","buffer","arr","lastImageData","view","Uint8Array","offset","info","header","m","cr","s","pixel","bgIndex","radio","colorTable","comment","readByte","len","slice","decode","bytes","Error","appVersion","forEach","e","String","fromCharCode","extension","disp","t","tranIndex","img","x","y","encodeSize","encodeBuf","byte","match","getHeader","getImageData","lzw","putImageData","min","clearCode","eofCode","dict","pos","clear","readBit","code","out","last","concat","apply","zipFrameData","frameData","nartualCanvas","nartualCtx","naturalWidth","naturalHeight","scaleCanvas","scaleCtx","scale","drawImage","imageParser_gif","_gifParser","uri","commaIndex","indexOf","meta","substring","byteString","atob","unescape","charCodeAt","rawWidth","rawHeight","framesData","ImageData","getImageDatas","imageParser_noGif","App","App_classCallCheck","App_possibleConstructorReturn","rawImage","setTransformType","transformType","setTransformWidth","transformWidth","toString","rescale","imagePreview","transform","getCurrentImage","transformResult","framesModal","component_TransformSetting","component_ImagePreviewUpload","component_FramesModal","react_dom_default","src_App","getElementById"],"mappings":"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","file":"js/app.968986e0d96fed7768cc.js","sourcesContent":["import React from 'react'\n\n/**\n * 分割线组件\n *\n * @export\n * @returns\n */\nexport default function Divide() {\n  return <div className=\"divide\" />\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 按钮组件\n *\n * @export\n * @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props\n * @returns\n */\nexport default function Button(props) {\n  let { children, className, ...attrs } = props\n  className = classNames(className, 'btn')\n  return (\n    <button {...attrs} type=\"button\" className={className}>\n      {children}\n    </button>\n  )\n}\n","const IMAGE_TYPES_RE = {\n  PNG: /image\\/png/,\n  JPG: /image\\/jpe?g/,\n  GIF: /image\\/gif/,\n}\n\n/**\n * 获取图片类型(png, jpg, gif)\n *\n * @param {string} type\n * @returns\n */\nexport function getImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    if (IMAGE_TYPES_RE.hasOwnProperty(typeName)) {\n      const typeRe = IMAGE_TYPES_RE[typeName]\n      if (typeRe.test(type)) {\n        return typeName\n      }\n    }\n  }\n}\n\nexport function checkImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    if (IMAGE_TYPES_RE.hasOwnProperty(typeName)) {\n      const typeRe = IMAGE_TYPES_RE[typeName]\n      if (typeRe.test(type)) {\n        return true\n      }\n    }\n  }\n  return false\n}","import GIF from 'gif.js'\nimport { getImageType } from './imageCommon'\n\nconst TEXT_LINE_HEIGHT = 12\nconst TEXT_WIDTH = 6\n// pre标签下的字体\nconst TEXT_FONT = 'normal normal 400 normal 12px / 12px monospace, monospace'\nconst COLOR = {\n  BLACK: 'rgba(0,0,0,1)',\n  WHITE: 'rgba(255,255,255,1)'\n}\n\nfunction getFrameCanvas(div, frame, props) {\n  const canvas = document.createElement('canvas')\n  canvas.width = div.scrollWidth\n  canvas.height = div.scrollHeight\n  const ctx = canvas.getContext('2d')\n  ctx.fillStyle = props.bgColor\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n  ctx.fillStyle = props.color\n  ctx.font = props.font\n  for (let i = 0; i < frame.length; i++) {\n    for (let j = 0; j < frame[i].length; j++) {\n      ctx.fillText(frame[i][j], j * TEXT_WIDTH, i * TEXT_LINE_HEIGHT)\n    }\n  }\n  return canvas\n}\n\nconst DEFAULT_GIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT,\n  delay: 300\n}\n/**\n * 创建gif图片\n *\n * @param {HTMLDivElement} div\n * @param {string[][]} frames\n * @param {object} props\n * @returns\n */\nfunction gif(div, frames, props, cb) {\n  props = Object.assign({}, DEFAULT_GIF_PROPS, props)\n  const width = div.scrollWidth\n  const height = div.scrollHeight\n  const gif = new GIF({\n    quality: 10,\n    workers: 2,\n    workerScript: './js/gif.worker.js',\n    width, height\n  })\n  gif.on('finished', function (blob) {\n    cb(blob)\n  })\n  for (let i = 0; i < frames.length; i++) {\n    const canvas = getFrameCanvas(div, frames[i], props)\n    gif.addFrame(canvas, {\n      delay: props.delay\n    })\n  }\n  gif.render()\n  console.log(gif)\n}\n\nconst DEFAULT_NOGIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT\n}\n/**\n * 创建非gif图片(jpg)\n *\n * @param {HTMLDivElement} div\n * @param {string[]} frame\n * @param {object} props\n * @returns\n */\nfunction noGif(div, frame, props) {\n  props = Object.assign({}, DEFAULT_NOGIF_PROPS, props)\n  const canvas = getFrameCanvas(div, frame, props)\n  return canvas.toDataURL('image/png')\n}\n\n/**\n * 创建新的图片\n *\n * @export\n * @param {object} option\n * @param {HTMLDivElement} option.div\n * @param {string[][]} option.frames\n * @param {File} option.file\n */\nexport function createImage(option) {\n  const { div, frames, file, ...props } = option\n  const type = getImageType(file.type)\n\n  const link = document.createElement('a')\n  let filename = file.name.split('.')\n  filename[filename.length - 2] = filename[filename.length - 2] + '-text'\n  filename = filename.join('.')\n  link.download = filename\n\n  if (type === 'GIF') {\n    gif(div, frames, props, function (blob) {\n      const url = URL.createObjectURL(blob)\n      console.log(url)\n      link.href = url\n      link.click()\n      URL.revokeObjectURL(url)\n    })\n  } else {\n    link.href = noGif(div, frames[0], props)\n    link.click()\n  }\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport Button from './Button'\nimport Divide from './Divide'\nimport { createImage } from '../tools/imageCreater'\nimport '../style/modal.css'\n\nconst DEFAULT_PLAY_DELAY = 300\n\n/**\n * 显示图片转字符结果的模态框\n *\n * @export\n * @class FramesModal\n * @extends {React.PureComponent}\n */\nexport default class FramesModal extends React.PureComponent {\n\n  /**\n   * Creates an instance of FramesModal.\n   *\n   * @param {object} props\n   * @param {string[][]} props.frames\n   * @param {File} props.file\n   *\n   * @memberof FramesModal\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      open: false,\n      frameIndex: 0,\n      playDelay: DEFAULT_PLAY_DELAY\n    }\n    this.playTimer = null\n    this.playDelayInput = React.createRef()\n    this.outputRef = React.createRef()\n  }\n\n  componentWillUnmount() {\n    // 组件销毁时，取消定时器\n    this.stop()\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.file) {\n      // 更换文件时，将播放帧序号重置回0\n      return {\n        frameIndex: 0\n      }\n    }\n    return null\n  }\n\n  /**\n   * 保存图片为文件\n   *\n   * @memberof FramesModal\n   */\n  savePic = () => {\n    const createOption = {\n      div: this.outputRef.current,\n      frames: this.props.frames,\n      file: this.props.file,\n      delay: this.state.playDelay\n    }\n    createImage(createOption)\n  }\n\n  updatePlayDelay = () => {\n    const value = this.playDelayInput.current.value\n    // 退格到无数字时，设置为默认间隔\n    let nextNumber = value.length ? parseInt(value, 10) : DEFAULT_PLAY_DELAY\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      nextNumber = DEFAULT_PLAY_DELAY\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      playDelay: nextNumber\n    })\n  }\n\n  play() {\n    if (this.props.frames.length <= 1) {\n      return\n    }\n    const nextFrame = () => {\n      this.playTimer = setTimeout(() => {\n        let nextIndex = this.state.frameIndex + 1\n        if (nextIndex === this.props.frames.length) {\n          nextIndex = 0\n        }\n        this.setState({\n          frameIndex: nextIndex\n        })\n        nextFrame()\n      }, this.state.playDelay)\n    }\n    nextFrame()\n  }\n\n  stop() {\n    if (this.playTimer) {\n      clearTimeout(this.playTimer)\n    }\n  }\n\n  close = ev => {\n    ev.preventDefault()\n    this.stop()\n    this.setState({\n      open: false\n    })\n  }\n\n  open = () => {\n    this.play()\n    this.setState({\n      open: true\n    })\n  }\n\n  render() {\n    const modalClasses = classNames({\n      modal: true,\n      open: this.state.open\n    })\n    return (\n      <div className={modalClasses}>\n        <div className=\"modal-overlay\" />\n        <div className=\"modal-box\">\n          <div className=\"modal-header\">\n            <a href=\"#\" className=\"modal-close\" onClick={this.close}>X</a>\n            <h3 className=\"modal-title\">图片转化结果</h3>\n          </div>\n          <Divide />\n          <div className=\"output-options\">\n            {this.props.file && this.props.file.type === 'image/gif' ?\n              <span>\n                <input\n                  defaultValue={DEFAULT_PLAY_DELAY}\n                  className=\"play-delay-input\"\n                  ref={this.playDelayInput}\n                  placeholder=\"播放帧间隔(ms)\" />\n                <Button className=\"update-btn\" onClick={this.updatePlayDelay}>\n                  更新间隔时间(ms)\n                </Button>\n              </span>: null\n            }\n            <Button className=\"save-btn\" onClick={this.savePic}>\n              保存为图片\n            </Button>\n          </div>\n          <Divide />\n          <div className=\"output-text-wrapper\">\n            <div id=\"output-text-block\" className=\"output-text-block\" ref={this.outputRef}>\n              {this.props.frames.length\n                ? this.props.frames[this.state.frameIndex].map((line, index) => <pre key={index}>{line}</pre>)\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../style/transformSetting.css'\n\nexport default class TransformSetting extends React.PureComponent {\n  static propTypes = {\n    label: PropTypes.string,\n    labelFor: PropTypes.string\n  }\n\n  static defaultProps = {\n    label: '',\n    labelFor: ''\n  }\n\n  render() {\n    return (\n      <div className=\"transform-setting\">\n        {this.props.label ? <label htmlFor={this.props.labelFor}>{this.props.label}</label> : null}\n        {this.props.children}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 行组件\n *\n * @export\n * @param {React.HTMLAttributes<HTMLDivElement>} props\n * @returns\n */\nexport default function Row(props) {\n  let { children, className, ...attrs } = props\n  className = classNames(className, 'row')\n  return (\n    <div {...attrs} className={className}>\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport { checkImageType } from '../tools/imageCommon'\nimport '../style/imagePreviewUpload.css'\n/**\n * 图片上传预览组件\n *\n * @export\n * @class ImagePreviewUpload\n * @extends {React.Component}\n */\nexport default class ImagePreviewUpload extends React.Component {\n\n  /**\n   * Creates an instance of ImagePreviewUpload.\n   *\n   * @param {object} props\n   * @param {HTMLImageElement} props.image\n   * @param {File} props.file\n   * @param {number} props.previewWidth\n   * @param {Function} props.setImageAndFile\n   *\n   * @memberof ImagePreviewUpload\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      isDragging: false,\n      width: 400,\n      height: 250\n    }\n\n    /**\n     * @type {React.RefObject<HTMLInputElement>}\n     */\n    this.fileUpload = React.createRef()\n    this.currentImageRef = React.createRef()\n    this.componentRef = React.createRef()\n  }\n\n  getCurrentImage() {\n    return this.currentImageRef.current\n  }\n\n  size = () => {\n    return {\n      width: this.state.width,\n      height: this.state.height\n    }\n  }\n\n  dragEnter = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: true\n    })\n  }\n\n  dragOver = ev => {\n    ev.preventDefault()\n  }\n\n  dragLeave = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: false\n    })\n  }\n\n  drop = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: false\n    })\n    const file = ev.dataTransfer.files[0]\n    this.previewImage(file)\n  }\n\n  openFileInput = () => {\n    this.fileUpload.current.click()\n  }\n\n  setFile = ev => {\n    const file = ev.target.files[0]\n    if (file) {\n      this.previewImage(file)\n    }\n  }\n\n  /**\n   * 预览图片文件\n   *\n   * @param {File} file\n   * @memberof ImagePreviewUpload\n   */\n  previewImage(file) {\n    if (!checkImageType(file.type)) {\n      alert('不支持该格式的文件')\n      return\n    }\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.addEventListener('load', () => {\n      const image = new Image()\n      image.addEventListener('load', () => {\n        this.scaleImageContainer(image)\n        this.props.setImageAndFile(image, file)\n      })\n      image.src = reader.result\n    })\n  }\n\n  /**\n   * 等比例缩放图片尺寸\n   *\n   * @param {HTMLImageElement} image\n   */\n  scaleImageContainer(image) {\n    if (!image) {\n      // 不传递image时，使用当前的image（App组件传递）\n      image = this.props.image\n    }\n    const container = this.componentRef.current.parentElement\n    let targetWidth = this.props.previewWidth\n\n    // 缩放宽度检测\n    if (!targetWidth) {\n      // 没有指定宽度(或为0), 使用容器宽度\n      targetWidth = container.clientWidth\n      // 容器宽度比图片原宽度大，使用图片原宽度\n      if (image.width < targetWidth) {\n        targetWidth = image.width\n      }\n    } else if (targetWidth > container.clientWidth) {\n      alert('超过容器大小！请重新输入图片宽度')\n      return\n    }\n\n    const ratio = image.width / targetWidth\n    const targetHeight = image.height / ratio\n    this.setState({\n      width: targetWidth,\n      height: targetHeight\n    })\n  }\n\n  render() {\n    const uploadBlockClasses = classNames('upload-image-block', {active: this.state.isDragging}, this.props.className)\n    return (\n      <div\n        onDragEnter={this.dragEnter}\n        onDragOver={this.dragOver}\n        onDragLeave={this.dragLeave}\n        onDrop={this.drop}\n        onClick={this.openFileInput}\n        className={uploadBlockClasses}\n        style={{ width: this.state.width, height: this.state.height }}\n        ref={this.componentRef}\n      >\n        <input type=\"file\" style={{ display: 'none' }} accept=\"image/*\" ref={this.fileUpload} onChange={this.setFile} />\n        <span className=\"upload-label\">上传图片</span>\n        {this.props.image ? <img ref={this.currentImageRef} src={this.props.image.src} className=\"preview-image\" /> : null}\n      </div>\n    )\n  }\n}\n","/**\n * 获取rbg颜色的灰度\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @returns\n */\nfunction rgbToGray(r, g, b) {\n  return 0.299 * r + 0.578 * g + 0.114 * b\n}\n\nconst MAX_COLOR_PIXELS = 255\nconst DEFAULT_AVAILABLE_TEXTS = '@#&$%O!~;*^+-. '\n/**\n * 灰度转字符函数生成器\n *\n * @param {string | Array<string>} texts\n * @returns\n */\nexport function createGrayToTextFunc(texts = DEFAULT_AVAILABLE_TEXTS) {\n  /**\n   * 灰度转字符函数\n   *\n   * @param {number} gray\n   * @returns\n   */\n  function grayToText(gray) {\n    const charRange = MAX_COLOR_PIXELS / texts.length\n    return texts[(gray / charRange) >> 0][0] // 只取第一个字符\n  }\n\n  return grayToText\n}\n\n/**\n * 将图像的一帧转成字符数组\n *\n * @param {ImageData} imageData\n * @param {Function} [grayToText=defaultGrayToText]\n * @returns\n */\nexport function transformImageFrame(imageData, grayToText = createGrayToTextFunc()) {\n  const dataArr = imageData.data\n  const width = imageData.width\n  const height = imageData.height\n  const lines = []\n  for (let h = 0; h < height; h += 12) {\n    let line = ''\n    for (let w = 0; w < width; w += 6) {\n      const i = (w + width * h) * 4\n      const gray = rgbToGray(dataArr[i], dataArr[i + 1], dataArr[i + 2])\n      line += grayToText(gray)\n    }\n    lines.push(line)\n  }\n  return lines\n}\n","/**\n * Gif解析\n * https://github.com/intellilab/GIFParser\n *\n * @param {ArrayLike<number> | ArrayBufferLike} buffer\n * @returns\n */\nexport default function gifParser (buffer) {\n  const view = new Uint8Array(buffer)\n  let offset = 0\n  const info = {\n    /**\n     * 署名和版本号信息\n     */\n    header: '',\n    /**\n     * 图像宽度\n     */\n    w: 0,\n    /**\n     * 图像高度\n     */\n    h: 0,\n    /**\n     * m - 全局颜色列表标志\n     */\n    m: 0,\n    /**\n     * cr - 颜色深度(Color ResoluTion)\n     */\n    cr: 0,\n    /**\n     * s - 分类标志(Sort Flag)\n     */\n    s: 0,\n    /**\n     * pixel - 全局颜色列表大小\n     */\n    pixel: 0,\n    /**\n     * 背景颜色: 背景颜色在全局颜色列表中的索引\n     */\n    bgIndex: 0,\n    /**\n     * 像素宽高比\n     */\n    radio: 1,\n    /**\n     * 全局颜色列表信息\n     */\n    colorTable: [],\n    frames: [],\n    comment: ''\n  }\n  let frame\n\n  /**\n   * 读取指定长度字节\n   *\n   * @param {number} len\n   * @returns\n   */\n  function readByte(len) {\n    return view.slice(offset, (offset += len))\n  }\n\n  /**\n   * 读取gif头部信息 (起始 6 byte)\n   * 包括署名 (Signature) 和版本号 (Version)\n   */\n  function getHeader() {\n    const GIF_SIGNATURE_RE = /^GIF8[79]a$/\n    info.header = ''\n    readByte(6).forEach(byte => {\n      info.header += String.fromCharCode(byte)\n    })\n    if (!info.header.match(GIF_SIGNATURE_RE)) {\n      throw new Error('GIF署名错误')\n    }\n  }\n\n  /**\n   * 读取逻辑屏幕标识符 (Logical Screen Descriptor), 总共 7 byte\n   */\n  function getScreenDesc() {\n    const arr = readByte(7)\n\n    info.w = arr[0] + (arr[1] << 8)\n    info.h = arr[2] + (arr[3] << 8)\n    info.m = 1 & (arr[4] >> 7)\n    info.cr = 7 & (arr[4] >> 4)\n    info.s = 1 & (arr[4] >> 3)\n    info.pixel = 7 & arr[4]\n    info.bgIndex = arr[5]\n    info.radio = arr[6]\n\n    // 若全局颜色列表标志位置数了，则读取全局颜色列表\n    if (info.m) {\n      // 2 << pixel === 1 << (pixel + 1) === 2^(pixel+1)\n      info.colorTable = readByte((2 << info.pixel) * 3)\n    }\n  }\n\n  function decode() {\n    let bytes = readByte(1)\n\n    switch (bytes[0]) {\n      case 0x21: //扩展块, 33\n        extension()\n        break\n      case 0x2c: //图像标识符, 44\n        bytes = readByte(9)\n        frame.img = {\n          x: bytes[0] + (bytes[1] << 8),\n          y: bytes[2] + (bytes[3] << 8),\n          w: bytes[4] + (bytes[5] << 8),\n          h: bytes[6] + (bytes[7] << 8),\n          m: 1 & (bytes[8] >> 7),\n          /**\n           * i - 交织标志(Interlace Flag)\n           */\n          i: 1 & (bytes[8] >> 6),\n          s: 1 & (bytes[8] >> 5),\n          r: 3 & (bytes[8] >> 3),\n          pixel: 7 & bytes[8],\n          colorTable: []\n        }\n\n        // 读取局部颜色列表信息\n        if (frame.img.m) {\n          frame.img.colorTable = readByte((2 << frame.img.pixel) * 3)\n        }\n\n        // 读取LZW编码的长度\n        frame.img.encodeSize = readByte(1)[0]\n\n        const encodeBuf = []\n        while (1) {\n          bytes = readByte(1)\n          if (bytes[0]) {\n            // arr[0] 为当前块的大小（不包括自己这个字节）\n            // 读取这个数据块的所有数据，并保存为一个数组\n            readByte(bytes[0]).forEach(e => {\n              encodeBuf.push(e)\n            })\n          } else {\n            frame.img.encodeBuf = encodeBuf\n            decode()\n            break\n          }\n        }\n        break\n      case 0x3b: // 终结符，59\n        console.log('Parse Finish.')\n        break\n      default:\n        // 未知标识符，报错\n        throw new Error('Unknow Byte Flag:' + bytes[0])\n    }\n  }\n\n  function extension() {\n    let bytes = readByte(1)\n    switch (bytes[0]) {\n      case 0xff: // 应用程序扩展, 255\n        if (readByte(1)[0] == 11) {\n          info.appVersion = ''\n          readByte(11).forEach(function(e) {\n            info.appVersion += String.fromCharCode(e)\n          })\n          while(1) {\n            bytes = readByte(1)\n            if (bytes[0]) {\n              readByte(bytes[0])\n            } else {\n              decode()\n              break\n            }\n          }\n        } else {\n          throw new Error('解析出错')\n        }\n        break\n      case 0xf9: // 图形控制扩展, 249\n        // 块大小固定为 4\n        if (readByte(1)[0] === 4) {\n          bytes = readByte(4)\n          frame = {}\n          frame.extension = {\n            // 处置方法\n            disp: 7 & (bytes[0] >> 2),\n            // 用户输入标准\n            i: 1 & (bytes[0] >> 1),\n            // 透明色标志\n            t: 1 & bytes[0],\n            // 延迟时间\n            delay: (bytes[1] + (bytes[2] << 8)) * 10,\n            // 透明色索引\n            tranIndex: bytes[3]\n          }\n          info.frames.push(frame)\n          // 标识块终结符\n          if (readByte(1)[0] == 0) {\n            decode()\n          } else {\n            throw new Error('解析出错')\n          }\n        } else {\n          throw new Error('解析出错')\n        }\n        break\n      case 0xfe: // 注释块, 254\n        bytes = readByte(1)\n        if (bytes[0]) {\n          readByte(bytes[0]).forEach(function(e) {\n            info.comment += String.fromCharCode(e)\n          })\n          if (readByte(1)[0] == 0) {\n            decode()\n          }\n        }\n        break\n      default:\n        console.log(bytes)\n        break\n    }\n  }\n\n  function calcPixel() {\n    let lastImageData\n    info.frames.forEach(function(frame) {\n      const canvas = document.createElement('canvas')\n      const ctx = canvas.getContext('2d')\n      // 判断使用局部颜色列表还是全局颜色列表\n      const colorTable = frame.img.m ? frame.img.colorTable : info.colorTable\n\n      canvas.width = info.w\n      canvas.height = info.h\n      let imageData = ctx.getImageData(0, 0, info.w, info.h)\n\n      lzw(frame.img.encodeBuf, frame.img.encodeSize)\n        .decode()\n        .forEach(function(pixel, i) {\n          imageData.data[i * 4] = colorTable[pixel * 3]\n          imageData.data[i * 4 + 1] = colorTable[pixel * 3 + 1]\n          imageData.data[i * 4 + 2] = colorTable[pixel * 3 + 2]\n          imageData.data[i * 4 + 3] = 255\n          if (frame.extension.t && pixel == frame.extension.tranIndex) {\n            imageData.data[i * 4 + 3] = 0\n          }\n        })\n      ctx.putImageData(imageData, frame.img.x, frame.img.y, 0, 0, frame.img.w, frame.img.h)\n      imageData = ctx.getImageData(0, 0, info.w, info.h)\n\n      if (lastImageData) {\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          // 某个像素不透明度为 0，用上一帧的相应位置的数据填补\n          if (imageData.data[i + 3] == 0) {\n            imageData.data[i] = lastImageData.data[i]\n            imageData.data[i + 1] = lastImageData.data[i + 1]\n            imageData.data[i + 2] = lastImageData.data[i + 2]\n            imageData.data[i + 3] = lastImageData.data[i + 3]\n          }\n        }\n      }\n      if (frame.extension.disp === 1 || frame.extension.disp === 0) {\n        lastImageData = imageData\n      }\n      frame.data = imageData.data\n    })\n  }\n\n  getHeader()\n  getScreenDesc()\n  decode()\n  calcPixel()\n\n  return {\n    width: info.w,\n    height: info.h,\n    frames: info.frames.map(frame => ({\n      data: frame.data,\n      delay: frame.extension.delay\n    }))\n  }\n}\n\n/**\n * lzw压缩算法（解压缩）\n *\n * @param {Array} arr\n * @param {number} min\n * @returns\n */\nconst lzw = function(arr, min) {\n  const clearCode = 1 << min\n  const eofCode = clearCode + 1\n  let size = min + 1\n  let dict = []\n  let pos = 0\n\n  /**\n   * 清除已存储的压缩映射表数据\n   */\n  function clear() {\n    dict = []\n    size = min + 1\n    for (let i = 0; i < clearCode; i++) {\n      dict[i] = [i]\n    }\n    dict[clearCode] = []\n    dict[eofCode] = null\n  }\n\n  /**\n   * 读取指定位数 bit，并转成10进制数字\n   *\n   * @param {number} size\n   * @returns\n   */\n  function readBit(size) {\n    let code = 0\n    for (let i = 0; i < size; i++) {\n      // arr[pos / 8] & (1 << (pos % 8))\n      if (arr[pos >> 3] & (1 << (pos & 7))) {\n        code |= 1 << i\n      }\n      pos++\n    }\n    return code\n  }\n\n  function decode() {\n    const out = []\n    let last // 前缀\n    let code // 后缀\n    while (1) {\n      last = code\n      code = readBit(size)\n\n      if (code == clearCode) {\n        // 第一个读到的 code 必然是 clearCode，会初始化数据\n        clear()\n        continue\n      } else if (code == eofCode) {\n        break\n      } else if (code < dict.length) {\n        // code 映射已知\n        if (last !== clearCode) {\n          dict.push(dict[last].concat(dict[code][0]))\n        }\n      } else if (code === dict.length) {\n        // code 映射未知\n        dict.push(dict[last].concat(dict[last][0]))\n      } else {\n        throw new Error('LZW解析出错')\n      }\n      out.push.apply(out, dict[code])\n      if (dict.length === 1 << size && size < 12) {\n        // 取值位数+1\n        size++\n      }\n    }\n    return out\n  }\n\n  return {\n    decode: decode\n  }\n}\n","import gifParser from './gifParser'\nimport * as datauri from './datauri'\nimport { getImageType } from './imageCommon'\n\n/**\n * 通过缩放比例压缩帧\n *\n * @param {ImageData} frameData\n * @param {HTMLImageElement} image\n */\nfunction zipFrameData(frameData, image) {\n  // 方法来源：\n  // https://stackoverflow.com/questions/3448347/how-to-scale-an-imagedata-in-html-canvas\n\n  // 存放一帧原图像到canvas中\n  const nartualCanvas = document.createElement('canvas')\n  const nartualCtx = nartualCanvas.getContext('2d')\n  nartualCanvas.width = image.naturalWidth\n  nartualCanvas.height = image.naturalHeight\n  nartualCtx.putImageData(frameData, 0, 0)\n\n  // 新建一个canvas，宽高设为目标宽高，并进行画布缩放\n  const scaleCanvas = document.createElement('canvas')\n  const scaleCtx = scaleCanvas.getContext('2d')\n  scaleCanvas.width = image.width\n  scaleCanvas.height = image.height\n  const ratio = image.width / image.naturalWidth\n  scaleCtx.scale(ratio, ratio)\n  // 将保存的原图像使用drawImage绘制到新画布上\n  scaleCtx.drawImage(nartualCanvas, 0, 0)\n\n  return scaleCtx.getImageData(0, 0, image.width, image.height)\n}\n\n/**\n * 获取gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction gif(image) {\n  const data = datauri.decode(image.src)\n  const { width: rawWidth, height: rawHeight, frames } = gifParser(data)\n  const framesData = []\n  for(let i = 0; i < frames.length; i++) {\n    const frameData = new ImageData(frames[i].data, rawWidth, rawHeight)\n    framesData.push(zipFrameData(frameData, image))\n  }\n  return framesData\n}\n\n/**\n * 获取非gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction noGif(image) {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  const ratio = image.width / image.naturalWidth\n  // 将画布内容缩放到与当前图像一致\n  canvas.width = image.width\n  canvas.height = image.height\n  ctx.scale(ratio, ratio)\n  // 绘制当前图像到canvas上\n  ctx.drawImage(image, 0, 0)\n  const imageData = ctx.getImageData(0, 0, image.width, image.height)\n  return [imageData]\n}\n\n\n/**\n * 获取图像信息\n *\n * @export\n * @param {HTMLImageElement} image\n * @param {File} file\n * @returns\n */\nexport function getImageDatas(image, file) {\n  const type = getImageType(file.type)\n  if (type === 'GIF') {\n    return gif(image)\n  } else {\n    return noGif(image)\n  }\n}\n","/**\n * datauri 转 ArrayBuffer\n * https://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata\n *\n * @export\n * @param {string} uri\n * @returns\n */\nexport function decode(uri) {\n  // 找到分割 metadata 和 data 的逗号位置\n  const commaIndex = uri.indexOf(',')\n\n  const meta = uri.substring(5, commaIndex).split(';')  // 头部信息 metadata\n  const type = meta[0] || 'text/plain'\n\n  const data = uri.substring(commaIndex + 1)  // 内容信息\n  let byteString\n  if (meta.indexOf('base64') >= 0) {\n    byteString = atob(data)\n  } else {\n    byteString = unescape(data)\n  }\n  const buffer = new Uint8Array(byteString.length)\n  for (let i = 0; i < byteString.length; i++) {\n    buffer[i] = byteString.charCodeAt(i)\n  }\n  buffer.type = type\n\n  return buffer\n}\n","import React from 'react'\nimport Divide from './component/Divide'\nimport Button from './component/Button'\nimport FramesModal from './component/FramesModal'\nimport TransformSetting from './component/TransformSetting'\nimport Row from './component/Row'\nimport ImagePreviewUpload from './component/ImagePreviewUpload'\nimport { transformImageFrame } from './tools/imageToText'\nimport { getImageDatas } from './tools/imageParser'\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      transformWidth: '',\n      transformResult: [],\n      rawImage: null,\n      file: null\n    }\n    this.imagePreview = React.createRef()\n    this.framesModal = React.createRef()\n  }\n\n  setImageAndFile = (rawImage, file) => {\n    this.setState({rawImage, file})\n  }\n\n  setTransformType = (ev) => {\n    this.setState({\n      transformType: ev.target.value\n    })\n  }\n\n  setTransformWidth = (ev) => {\n    const value = ev.target.value\n    // 退格到无数字时，设置为0\n    const nextNumber = value.length ? parseInt(value, 10) : 0\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      return\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      transformWidth: nextNumber.toString()\n    })\n  }\n\n  rescale = () => {\n    this.imagePreview.current.scaleImageContainer()\n  }\n\n  /**\n   * 图片转字符\n   *\n   * @memberof App\n   */\n  transform = () => {\n    /**\n     * @type {HTMLImageElement}\n     */\n    const image = this.imagePreview.current.getCurrentImage()\n    const file = this.state.file\n    const imageDatas = getImageDatas(image, file)\n    const frames = imageDatas.map(imageData => {\n      return transformImageFrame(imageData)\n    })\n    this.setState({\n      transformResult: frames\n    }, () => {\n      this.framesModal.current.open()\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1 className=\"text-center\">图片转字符画工具</h1>\n        </header>\n        <Divide/>\n        <Row className=\"transform-settings-wrapper\">\n          <TransformSetting label=\"目标图片宽度:\" labelFor=\"transform-size\">\n            <input type=\"number\" id=\"transform-size\" className=\"transform-size-input\" name=\"transform-size\" value={this.state.transformWidth} onChange={this.setTransformWidth} />\n          </TransformSetting>\n          {/* <TransformSetting label=\"是否着色:\" labelFor=\"transform-color\">\n            <input type=\"checkbox\" id=\"transform-color\" className=\"transform-color-checkbox\" name=\"transform-color\" value={this.state.transformColor} onChange={this.setTransformColor} />\n          </TransformSetting> */}\n          <Button onClick={this.rescale}>重新缩放</Button>\n          <Button onClick={this.transform}>开始转化</Button>\n        </Row>\n        <Divide/>\n        <Row>\n          <ImagePreviewUpload file={this.state.file} image={this.state.rawImage} setImageAndFile={this.setImageAndFile} previewWidth={parseInt(this.state.transformWidth)} ref={this.imagePreview}></ImagePreviewUpload>\n        </Row>\n        <FramesModal ref={this.framesModal} frames={this.state.transformResult} file={this.state.file} />\n      </div>\n    )\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './style/normalize.css'\nimport './style/index.css'\n\nif (module.hot) {\n  module.hot.accept()\n}\n\nReactDOM.render(<App />, document.getElementById('app'))\n"],"sourceRoot":""}