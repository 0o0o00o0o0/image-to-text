{"version":3,"sources":["webpack:///./src/component/Divide.jsx","webpack:///./src/component/Button.jsx","webpack:///./src/tools/imageCommon.js","webpack:///./src/tools/constant.js","webpack:///./src/tools/imageCreater.js","webpack:///./src/component/FramesModal.jsx","webpack:///./src/component/TransformSetting.jsx","webpack:///./src/component/Row.jsx","webpack:///./src/component/ImagePreviewUpload.jsx","webpack:///./src/tools/imageToText.js","webpack:///./src/tools/gifParser.js","webpack:///./src/tools/imageParser.js","webpack:///./src/tools/datauri.js","webpack:///./src/App.jsx","webpack:///./src/index.js"],"names":["Divide","react_default","a","createElement","className","Button","props","children","attrs","_objectWithoutProperties","classnames_default","_extends","type","IMAGE_TYPES_RE","PNG","JPG","GIF","getImageType","typeName","hasOwnProperty","test","FONT_WIDTH","FONT_HEIGHT","DEFAULT_AVAILABLE_TEXTS","TEXT_FONT","COLOR","getFrameCanvas","div","frame","canvas","document","width","scrollWidth","height","scrollHeight","ctx","getContext","fillStyle","bgColor","fillRect","color","font","i","length","j","fillText","DEFAULT_GIF_PROPS","DEFAULT_NOGIF_PROPS","createImage","option","frames","file","imageCreater_objectWithoutProperties","link","filename","name","split","join","download","cb","Object","assign","gif","gif_default","quality","workers","workerScript","on","blob","text","addFrame","delay","render","imageCreater_gif","url","URL","createObjectURL","href","click","revokeObjectURL","toDataURL","noGif","FramesModal","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","savePic","outputRef","current","close","ev","preventDefault","stop","setState","open","play","state","frameIndex","playTimer","createRef","PureComponent","_this2","nextFrame","setTimeout","nextIndex","clearTimeout","modalClasses","modal","onClick","id","ref","map","line","index","key","nextProps","TransformSetting_TransformSetting","label","htmlFor","labelFor","propTypes","prop_types_default","string","defaultProps","Row","Row_objectWithoutProperties","Row_extends","ImagePreviewUpload","ImagePreviewUpload_classCallCheck","ImagePreviewUpload_possibleConstructorReturn","size","dragEnter","isDragging","dragOver","dragLeave","drop","dataTransfer","files","previewImage","openFileInput","fileUpload","setFile","target","currentImageRef","componentRef","Component","checkImageType","reader","FileReader","readAsDataURL","addEventListener","image","Image","scaleImageContainer","setImageAndFile","src","result","alert","container","parentElement","targetWidth","previewWidth","clientWidth","ratio","targetHeight","uploadBlockClasses","active","onDragEnter","onDragOver","onDragLeave","onDrop","style","display","accept","onChange","MAX_COLOR_PIXELS","transformImageToText","imageData","r","g","b","grayToText","arguments","undefined","texts","grayGap","gray","textIndex","createGrayToTextFunc","dataArr","data","lines","h","w","push","gifParser","buffer","arr","lastImageData","view","Uint8Array","offset","info","header","m","cr","s","pixel","bgIndex","radio","colorTable","comment","readByte","len","slice","decode","bytes","Error","appVersion","forEach","e","String","fromCharCode","extension","disp","t","tranIndex","console","log","img","x","y","encodeSize","encodeBuf","byte","match","getHeader","getImageData","lzw","putImageData","min","clearCode","eofCode","dict","pos","clear","readBit","code","out","last","concat","apply","zipFrameData","frameData","nartualCanvas","nartualCtx","naturalWidth","naturalHeight","scaleCanvas","scaleCtx","scale","drawImage","imageParser_gif","_gifParser","uri","commaIndex","indexOf","meta","substring","byteString","atob","unescape","charCodeAt","rawWidth","rawHeight","framesData","ImageData","getImageDatas","imageParser_noGif","App","App_classCallCheck","App_possibleConstructorReturn","rawImage","setTransformType","transformType","value","setTransformWidth","nextNumber","parseInt","isNaN","transformWidth","toString","rescale","imagePreview","transform","getCurrentImage","transformResult","framesModal","component_TransformSetting","component_ImagePreviewUpload","component_FramesModal","react_dom_default","src_App","getElementById"],"mappings":"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","file":"js/app.b12c10c6a8eb2efd7ae7.js","sourcesContent":["import React from 'react'\n\n/**\n * 分割线组件\n *\n * @export\n * @returns\n */\nexport default function Divide() {\n  return <div className=\"divide\" />\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 按钮组件\n *\n * @export\n * @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props\n * @returns\n */\nexport default function Button(props) {\n  let { children, className, ...attrs } = props\n  className = classNames(className, 'btn')\n  return (\n    <button {...attrs} type=\"button\" className={className}>\n      {children}\n    </button>\n  )\n}\n","const IMAGE_TYPES_RE = {\n  PNG: /image\\/png/,\n  JPG: /image\\/jpe?g/,\n  GIF: /image\\/gif/,\n}\n\n/**\n * 获取图片类型(png, jpg, gif)\n *\n * @param {string} type\n * @returns\n */\nexport function getImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    if (IMAGE_TYPES_RE.hasOwnProperty(typeName)) {\n      const typeRe = IMAGE_TYPES_RE[typeName]\n      if (typeRe.test(type)) {\n        return typeName\n      }\n    }\n  }\n}\n\nexport function checkImageType(type) {\n  for (const typeName in IMAGE_TYPES_RE) {\n    if (IMAGE_TYPES_RE.hasOwnProperty(typeName)) {\n      const typeRe = IMAGE_TYPES_RE[typeName]\n      if (typeRe.test(type)) {\n        return true\n      }\n    }\n  }\n  return false\n}","// imageCreate.js, imageToText.js\nexport const FONT_WIDTH = 6\nexport const FONT_HEIGHT = 12\n\n// imageToText.js\nexport const DEFAULT_AVAILABLE_TEXTS = '@#&$%863!i1uazvno~;*^+-. '","import GIF from 'gif.js'\nimport { getImageType } from './imageCommon'\nimport { FONT_HEIGHT, FONT_WIDTH } from './constant'\n\n// pre标签下的字体\nconst TEXT_FONT = `normal normal 400 normal ${FONT_HEIGHT}px / ${FONT_HEIGHT}px monospace, monospace`\nconst COLOR = {\n  BLACK: 'rgba(0,0,0,1)',\n  WHITE: 'rgba(255,255,255,1)'\n}\n\nfunction getFrameCanvas(div, frame, props) {\n  const canvas = document.createElement('canvas')\n  canvas.width = div.scrollWidth\n  canvas.height = div.scrollHeight\n  const ctx = canvas.getContext('2d')\n  ctx.fillStyle = props.bgColor\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n  ctx.fillStyle = props.color\n  ctx.font = props.font\n  for (let i = 0; i < frame.length; i++) {\n    for (let j = 0; j < frame[i].length; j++) {\n      ctx.fillText(frame[i][j], j * FONT_WIDTH, i * FONT_HEIGHT)\n    }\n  }\n  return canvas\n}\n\nconst DEFAULT_GIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT\n}\n/**\n * 创建gif图片\n *\n * @param {HTMLDivElement} div\n * @param {object} frames\n * @param {object} props\n * @returns\n */\nfunction gif(div, frames, props, cb) {\n  props = Object.assign({}, DEFAULT_GIF_PROPS, props)\n  const width = div.scrollWidth\n  const height = div.scrollHeight\n  const gif = new GIF({\n    quality: 10,\n    workers: 2,\n    workerScript: './js/gif.worker.js',\n    width, height\n  })\n  gif.on('finished', function (blob) {\n    cb(blob)\n  })\n  for (let i = 0; i < frames.length; i++) {\n    const canvas = getFrameCanvas(div, frames[i].text, props)\n    gif.addFrame(canvas, {\n      delay: frames[i].delay\n    })\n  }\n  gif.render()\n}\n\nconst DEFAULT_NOGIF_PROPS = {\n  bgColor: COLOR.WHITE,\n  color: COLOR.BLACK,\n  font: TEXT_FONT\n}\n/**\n * 创建非gif图片(jpg)\n *\n * @param {HTMLDivElement} div\n * @param {object} frame\n * @param {object} props\n * @returns\n */\nfunction noGif(div, frame, props) {\n  props = Object.assign({}, DEFAULT_NOGIF_PROPS, props)\n  const canvas = getFrameCanvas(div, frame.text, props)\n  return canvas.toDataURL('image/png')\n}\n\n/**\n * 创建新的图片\n *\n * @export\n * @param {object} option\n * @param {HTMLDivElement} option.div\n * @param {object} option.frames\n * @param {File} option.file\n */\nexport function createImage(option) {\n  const { div, frames, file, ...props } = option\n  const type = getImageType(file.type)\n\n  const link = document.createElement('a')\n  let filename = file.name.split('.')\n  filename[filename.length - 2] = filename[filename.length - 2] + '-text'\n  filename = filename.join('.')\n  link.download = filename\n\n  if (type === 'GIF') {\n    gif(div, frames, props, function (blob) {\n      const url = URL.createObjectURL(blob)\n      link.href = url\n      link.click()\n      URL.revokeObjectURL(url)\n    })\n  } else {\n    link.href = noGif(div, frames[0], props)\n    link.click()\n  }\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport Button from './Button'\nimport Divide from './Divide'\nimport { createImage } from '../tools/imageCreater'\nimport '../style/modal.css'\n\n/**\n * 显示图片转字符结果的模态框\n *\n * @export\n * @class FramesModal\n * @extends {React.PureComponent}\n */\nexport default class FramesModal extends React.PureComponent {\n\n  /**\n   * @typedef Frame\n   * @prop {ImageData} data\n   * @prop {string[]} text\n   * @prop {number} delay\n   */\n\n  /**\n   * Creates an instance of FramesModal.\n   *\n   * @param {object} props\n   * @param {Frame[]} props.frames\n   * @param {File} props.file\n   *\n   * @memberof FramesModal\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      open: false,\n      frameIndex: 0\n    }\n    this.playTimer = null\n    this.outputRef = React.createRef()\n  }\n\n  componentWillUnmount() {\n    // 组件销毁时，取消定时器\n    this.stop()\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.file) {\n      // 更换文件时，将播放帧序号重置回0\n      return {\n        frameIndex: 0\n      }\n    }\n    return null\n  }\n\n  /**\n   * 保存图片为文件\n   *\n   * @memberof FramesModal\n   */\n  savePic = () => {\n    const createOption = {\n      div: this.outputRef.current,\n      frames: this.props.frames,\n      file: this.props.file\n    }\n    createImage(createOption)\n  }\n\n  play() {\n    // 不播放只有一帧的图片（非gif）\n    if (this.props.frames.length <= 1) {\n      return\n    }\n    const nextFrame = () => {\n      const delay = this.props.frames[this.state.frameIndex].delay\n      this.playTimer = setTimeout(() => {\n        let nextIndex = this.state.frameIndex + 1\n        if (nextIndex === this.props.frames.length) {\n          nextIndex = 0\n        }\n        this.setState({\n          frameIndex: nextIndex\n        }, nextFrame)\n      }, delay)\n    }\n    nextFrame()\n  }\n\n  stop() {\n    if (this.playTimer) {\n      clearTimeout(this.playTimer)\n    }\n  }\n\n  close = ev => {\n    ev.preventDefault()\n    this.stop()\n    this.setState({\n      open: false\n    })\n  }\n\n  open = () => {\n    this.play()\n    this.setState({\n      open: true\n    })\n  }\n\n  render() {\n    const modalClasses = classNames({\n      modal: true,\n      open: this.state.open\n    })\n    return (\n      <div className={modalClasses}>\n        <div className=\"modal-overlay\" />\n        <div className=\"modal-box\">\n          <div className=\"modal-header\">\n            <a href=\"#\" className=\"modal-close\" onClick={this.close}>X</a>\n            <h3 className=\"modal-title\">图片转化结果</h3>\n          </div>\n          <Divide />\n          <div className=\"output-options\">\n            <Button className=\"save-btn\" onClick={this.savePic}>\n              保存为图片\n            </Button>\n          </div>\n          <Divide />\n          <div className=\"output-text-wrapper\">\n            <div id=\"output-text-block\" className=\"output-text-block\" ref={this.outputRef}>\n              {this.props.frames.length\n                ? this.props.frames[this.state.frameIndex].text.map((line, index) => <pre key={index}>{line}</pre>)\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../style/transformSetting.css'\n\nexport default class TransformSetting extends React.PureComponent {\n  static propTypes = {\n    label: PropTypes.string,\n    labelFor: PropTypes.string\n  }\n\n  static defaultProps = {\n    label: '',\n    labelFor: ''\n  }\n\n  render() {\n    return (\n      <div className=\"transform-setting\">\n        {this.props.label ? <label htmlFor={this.props.labelFor}>{this.props.label}</label> : null}\n        {this.props.children}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\n/**\n * 行组件\n *\n * @export\n * @param {React.HTMLAttributes<HTMLDivElement>} props\n * @returns\n */\nexport default function Row(props) {\n  let { children, className, ...attrs } = props\n  className = classNames(className, 'row')\n  return (\n    <div {...attrs} className={className}>\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport { checkImageType } from '../tools/imageCommon'\nimport '../style/imagePreviewUpload.css'\n/**\n * 图片上传预览组件\n *\n * @export\n * @class ImagePreviewUpload\n * @extends {React.Component}\n */\nexport default class ImagePreviewUpload extends React.Component {\n\n  /**\n   * Creates an instance of ImagePreviewUpload.\n   *\n   * @param {object} props\n   * @param {HTMLImageElement} props.image\n   * @param {File} props.file\n   * @param {number} props.previewWidth\n   * @param {Function} props.setImageAndFile\n   *\n   * @memberof ImagePreviewUpload\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      isDragging: false,\n      width: 400,\n      height: 250\n    }\n\n    /**\n     * @type {React.RefObject<HTMLInputElement>}\n     */\n    this.fileUpload = React.createRef()\n    this.currentImageRef = React.createRef()\n    this.componentRef = React.createRef()\n  }\n\n  getCurrentImage() {\n    return this.currentImageRef.current\n  }\n\n  size = () => {\n    return {\n      width: this.state.width,\n      height: this.state.height\n    }\n  }\n\n  dragEnter = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: true\n    })\n  }\n\n  dragOver = ev => {\n    ev.preventDefault()\n  }\n\n  dragLeave = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: false\n    })\n  }\n\n  drop = ev => {\n    ev.preventDefault()\n    this.setState({\n      isDragging: false\n    })\n    const file = ev.dataTransfer.files[0]\n    this.previewImage(file)\n  }\n\n  openFileInput = () => {\n    this.fileUpload.current.click()\n  }\n\n  setFile = ev => {\n    const file = ev.target.files[0]\n    if (file) {\n      this.previewImage(file)\n    }\n  }\n\n  /**\n   * 预览图片文件\n   *\n   * @param {File} file\n   * @memberof ImagePreviewUpload\n   */\n  previewImage(file) {\n    if (!checkImageType(file.type)) {\n      alert('不支持该格式的文件')\n      return\n    }\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.addEventListener('load', () => {\n      const image = new Image()\n      image.addEventListener('load', () => {\n        this.scaleImageContainer(image)\n        this.props.setImageAndFile(image, file)\n      })\n      image.src = reader.result\n    })\n  }\n\n  /**\n   * 等比例缩放图片尺寸\n   *\n   * @param {HTMLImageElement} image\n   */\n  scaleImageContainer(image) {\n    if (!image) {\n      // 不传递image时，使用当前的image（App组件传递）\n      image = this.props.image\n    }\n    const container = this.componentRef.current.parentElement\n    let targetWidth = this.props.previewWidth\n\n    // 缩放宽度检测\n    if (!targetWidth) {\n      // 没有指定宽度(或为0), 使用容器宽度\n      targetWidth = container.clientWidth\n      // 容器宽度比图片原宽度大，使用图片原宽度\n      if (image.width < targetWidth) {\n        targetWidth = image.width\n      }\n    } else if (targetWidth > container.clientWidth) {\n      alert('超过容器大小！请重新输入图片宽度')\n      return\n    }\n\n    const ratio = image.width / targetWidth\n    const targetHeight = image.height / ratio\n    this.setState({\n      width: targetWidth,\n      height: targetHeight\n    })\n  }\n\n  render() {\n    const uploadBlockClasses = classNames('upload-image-block', {active: this.state.isDragging}, this.props.className)\n    return (\n      <div\n        onDragEnter={this.dragEnter}\n        onDragOver={this.dragOver}\n        onDragLeave={this.dragLeave}\n        onDrop={this.drop}\n        onClick={this.openFileInput}\n        className={uploadBlockClasses}\n        style={{ width: this.state.width, height: this.state.height }}\n        ref={this.componentRef}\n      >\n        <input type=\"file\" style={{ display: 'none' }} accept=\"image/*\" ref={this.fileUpload} onChange={this.setFile} />\n        <span className=\"upload-label\">上传图片</span>\n        {this.props.image ? <img ref={this.currentImageRef} src={this.props.image.src} className=\"preview-image\" /> : null}\n      </div>\n    )\n  }\n}\n","import { FONT_HEIGHT, FONT_WIDTH, DEFAULT_AVAILABLE_TEXTS } from './constant'\n\n/**\n * 获取rbg颜色的灰度\n *\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @returns\n */\nfunction rgbToGray(r, g, b) {\n  return (299 * r + 587 * g + 114 * b + 500) / 1000\n}\n\nexport const MAX_COLOR_PIXELS = 255\n\n/**\n * 灰度转字符函数生成器\n *\n * @param {string | Array<string>} texts\n * @returns\n */\nexport function createGrayToTextFunc(texts = DEFAULT_AVAILABLE_TEXTS) {\n\n  const grayGap = MAX_COLOR_PIXELS / texts.length\n\n  /**\n   * 灰度转字符函数\n   *\n   * @param {number} gray\n   * @returns\n   */\n  function grayToText(gray) {\n    let textIndex = (gray / grayGap) >> 0\n    if (textIndex >= texts.length) {\n      textIndex = texts.length - 1\n    }\n    return texts[textIndex]\n  }\n\n  return grayToText\n}\n\n/**\n * 将图像的一帧转成字符数组\n *\n * @param {ImageData} imageData\n * @param {Function} [grayToText=defaultGrayToText]\n * @returns\n */\nexport function transformImageToText(imageData, grayToText = createGrayToTextFunc()) {\n  const dataArr = imageData.data\n  const width = imageData.width\n  const height = imageData.height\n  const lines = []\n  for (let h = 0; h < height; h += FONT_HEIGHT) {\n    let line = ''\n    for (let w = 0; w < width; w += FONT_WIDTH) {\n      const i = (w + width * h) * 4\n      const gray = rgbToGray(dataArr[i], dataArr[i + 1], dataArr[i + 2])\n      line += grayToText(gray)\n    }\n    lines.push(line)\n  }\n  return lines\n}\n","/**\n * Gif解析\n * https://github.com/intellilab/GIFParser\n *\n * @param {ArrayLike<number> | ArrayBufferLike} buffer\n * @returns\n */\nexport default function gifParser (buffer) {\n  const view = new Uint8Array(buffer)\n  let offset = 0\n  const info = {\n    /**\n     * 署名和版本号信息\n     */\n    header: '',\n    /**\n     * 图像宽度\n     */\n    w: 0,\n    /**\n     * 图像高度\n     */\n    h: 0,\n    /**\n     * m - 全局颜色列表标志\n     */\n    m: 0,\n    /**\n     * cr - 颜色深度(Color ResoluTion)\n     */\n    cr: 0,\n    /**\n     * s - 分类标志(Sort Flag)\n     */\n    s: 0,\n    /**\n     * pixel - 全局颜色列表大小\n     */\n    pixel: 0,\n    /**\n     * 背景颜色: 背景颜色在全局颜色列表中的索引\n     */\n    bgIndex: 0,\n    /**\n     * 像素宽高比\n     */\n    radio: 1,\n    /**\n     * 全局颜色列表信息\n     */\n    colorTable: [],\n    frames: [],\n    comment: ''\n  }\n  let frame\n\n  /**\n   * 读取指定长度字节\n   *\n   * @param {number} len\n   * @returns\n   */\n  function readByte(len) {\n    return view.slice(offset, (offset += len))\n  }\n\n  /**\n   * 读取gif头部信息 (起始 6 byte)\n   * 包括署名 (Signature) 和版本号 (Version)\n   */\n  function getHeader() {\n    const GIF_SIGNATURE_RE = /^GIF8[79]a$/\n    info.header = ''\n    readByte(6).forEach(byte => {\n      info.header += String.fromCharCode(byte)\n    })\n    if (!info.header.match(GIF_SIGNATURE_RE)) {\n      throw new Error('GIF署名错误')\n    }\n  }\n\n  /**\n   * 读取逻辑屏幕标识符 (Logical Screen Descriptor), 总共 7 byte\n   */\n  function getScreenDesc() {\n    const arr = readByte(7)\n\n    info.w = arr[0] + (arr[1] << 8)\n    info.h = arr[2] + (arr[3] << 8)\n    info.m = 1 & (arr[4] >> 7)\n    info.cr = 7 & (arr[4] >> 4)\n    info.s = 1 & (arr[4] >> 3)\n    info.pixel = 7 & arr[4]\n    info.bgIndex = arr[5]\n    info.radio = arr[6]\n\n    // 若全局颜色列表标志位置数了，则读取全局颜色列表\n    if (info.m) {\n      // 2 << pixel === 1 << (pixel + 1) === 2^(pixel+1)\n      info.colorTable = readByte((2 << info.pixel) * 3)\n    }\n  }\n\n  function decode() {\n    let bytes = readByte(1)\n\n    switch (bytes[0]) {\n      case 0x21: //扩展块, 33\n        extension()\n        break\n      case 0x2c: //图像标识符, 44\n        bytes = readByte(9)\n        frame.img = {\n          x: bytes[0] + (bytes[1] << 8),\n          y: bytes[2] + (bytes[3] << 8),\n          w: bytes[4] + (bytes[5] << 8),\n          h: bytes[6] + (bytes[7] << 8),\n          m: 1 & (bytes[8] >> 7),\n          /**\n           * i - 交织标志(Interlace Flag)\n           */\n          i: 1 & (bytes[8] >> 6),\n          s: 1 & (bytes[8] >> 5),\n          r: 3 & (bytes[8] >> 3),\n          pixel: 7 & bytes[8],\n          colorTable: []\n        }\n\n        // 读取局部颜色列表信息\n        if (frame.img.m) {\n          frame.img.colorTable = readByte((2 << frame.img.pixel) * 3)\n        }\n\n        // 读取LZW编码的长度\n        frame.img.encodeSize = readByte(1)[0]\n\n        const encodeBuf = []\n        while (1) {\n          bytes = readByte(1)\n          if (bytes[0]) {\n            // arr[0] 为当前块的大小（不包括自己这个字节）\n            // 读取这个数据块的所有数据，并保存为一个数组\n            readByte(bytes[0]).forEach(e => {\n              encodeBuf.push(e)\n            })\n          } else {\n            frame.img.encodeBuf = encodeBuf\n            decode()\n            break\n          }\n        }\n        break\n      case 0x3b: // 终结符，59\n        console.log('Parse Finish.')\n        break\n      default:\n        // 未知标识符，报错\n        throw new Error('Unknow Byte Flag:' + bytes[0])\n    }\n  }\n\n  function extension() {\n    let bytes = readByte(1)\n    switch (bytes[0]) {\n      case 0xff: // 应用程序扩展, 255\n        if (readByte(1)[0] == 11) {\n          info.appVersion = ''\n          readByte(11).forEach(function(e) {\n            info.appVersion += String.fromCharCode(e)\n          })\n          while(1) {\n            bytes = readByte(1)\n            if (bytes[0]) {\n              readByte(bytes[0])\n            } else {\n              decode()\n              break\n            }\n          }\n        } else {\n          throw new Error('解析出错')\n        }\n        break\n      case 0xf9: // 图形控制扩展, 249\n        // 块大小固定为 4\n        if (readByte(1)[0] === 4) {\n          bytes = readByte(4)\n          frame = {}\n          frame.extension = {\n            // 处置方法\n            disp: 7 & (bytes[0] >> 2),\n            // 用户输入标准\n            i: 1 & (bytes[0] >> 1),\n            // 透明色标志\n            t: 1 & bytes[0],\n            // 延迟时间\n            delay: (bytes[1] + (bytes[2] << 8)) * 10,\n            // 透明色索引\n            tranIndex: bytes[3]\n          }\n          info.frames.push(frame)\n          // 标识块终结符\n          if (readByte(1)[0] == 0) {\n            decode()\n          } else {\n            throw new Error('解析出错')\n          }\n        } else {\n          throw new Error('解析出错')\n        }\n        break\n      case 0xfe: // 注释块, 254\n        bytes = readByte(1)\n        if (bytes[0]) {\n          readByte(bytes[0]).forEach(function(e) {\n            info.comment += String.fromCharCode(e)\n          })\n          if (readByte(1)[0] == 0) {\n            decode()\n          }\n        }\n        break\n      default:\n        console.log(bytes)\n        break\n    }\n  }\n\n  function calcPixel() {\n    let lastImageData\n    info.frames.forEach(function(frame) {\n      const canvas = document.createElement('canvas')\n      const ctx = canvas.getContext('2d')\n      // 判断使用局部颜色列表还是全局颜色列表\n      const colorTable = frame.img.m ? frame.img.colorTable : info.colorTable\n\n      canvas.width = info.w\n      canvas.height = info.h\n      let imageData = ctx.getImageData(0, 0, info.w, info.h)\n\n      lzw(frame.img.encodeBuf, frame.img.encodeSize)\n        .decode()\n        .forEach(function(pixel, i) {\n          imageData.data[i * 4] = colorTable[pixel * 3]\n          imageData.data[i * 4 + 1] = colorTable[pixel * 3 + 1]\n          imageData.data[i * 4 + 2] = colorTable[pixel * 3 + 2]\n          imageData.data[i * 4 + 3] = 255\n          if (frame.extension.t && pixel == frame.extension.tranIndex) {\n            imageData.data[i * 4 + 3] = 0\n          }\n        })\n      ctx.putImageData(imageData, frame.img.x, frame.img.y, 0, 0, frame.img.w, frame.img.h)\n      imageData = ctx.getImageData(0, 0, info.w, info.h)\n\n      if (lastImageData) {\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          // 某个像素不透明度为 0，用上一帧的相应位置的数据填补\n          if (imageData.data[i + 3] == 0) {\n            imageData.data[i] = lastImageData.data[i]\n            imageData.data[i + 1] = lastImageData.data[i + 1]\n            imageData.data[i + 2] = lastImageData.data[i + 2]\n            imageData.data[i + 3] = lastImageData.data[i + 3]\n          }\n        }\n      }\n      if (frame.extension.disp === 1 || frame.extension.disp === 0) {\n        lastImageData = imageData\n      }\n      frame.data = imageData.data\n    })\n  }\n\n  getHeader()\n  getScreenDesc()\n  decode()\n  calcPixel()\n\n  return {\n    width: info.w,\n    height: info.h,\n    frames: info.frames.map(frame => ({\n      /**\n       * @type {Uint8ClampedArray}\n       */\n      data: frame.data,\n      /**\n       * @type {number}\n       */\n      delay: frame.extension.delay\n    }))\n  }\n}\n\n/**\n * lzw压缩算法（解压缩）\n *\n * @param {Array} arr\n * @param {number} min\n * @returns\n */\nconst lzw = function(arr, min) {\n  const clearCode = 1 << min\n  const eofCode = clearCode + 1\n  let size = min + 1\n  let dict = []\n  let pos = 0\n\n  /**\n   * 清除已存储的压缩映射表数据\n   */\n  function clear() {\n    dict = []\n    size = min + 1\n    for (let i = 0; i < clearCode; i++) {\n      dict[i] = [i]\n    }\n    dict[clearCode] = []\n    dict[eofCode] = null\n  }\n\n  /**\n   * 读取指定位数 bit，并转成10进制数字\n   *\n   * @param {number} size\n   * @returns\n   */\n  function readBit(size) {\n    let code = 0\n    for (let i = 0; i < size; i++) {\n      // arr[pos / 8] & (1 << (pos % 8))\n      if (arr[pos >> 3] & (1 << (pos & 7))) {\n        code |= 1 << i\n      }\n      pos++\n    }\n    return code\n  }\n\n  function decode() {\n    const out = []\n    let last // 前缀\n    let code // 后缀\n    while (1) {\n      last = code\n      code = readBit(size)\n\n      if (code == clearCode) {\n        // 第一个读到的 code 必然是 clearCode，会初始化数据\n        clear()\n        continue\n      } else if (code == eofCode) {\n        break\n      } else if (code < dict.length) {\n        // code 映射已知\n        if (last !== clearCode) {\n          dict.push(dict[last].concat(dict[code][0]))\n        }\n      } else if (code === dict.length) {\n        // code 映射未知\n        dict.push(dict[last].concat(dict[last][0]))\n      } else {\n        throw new Error('LZW解析出错')\n      }\n      out.push.apply(out, dict[code])\n      if (dict.length === 1 << size && size < 12) {\n        // 取值位数+1\n        size++\n      }\n    }\n    return out\n  }\n\n  return {\n    decode: decode\n  }\n}\n","import gifParser from './gifParser'\nimport * as datauri from './datauri'\nimport { getImageType } from './imageCommon'\n\n/**\n * 通过缩放比例压缩帧\n *\n * @param {ImageData} frameData\n * @param {HTMLImageElement} image\n */\nfunction zipFrameData(frameData, image) {\n  // 方法来源：\n  // https://stackoverflow.com/questions/3448347/how-to-scale-an-imagedata-in-html-canvas\n\n  // 存放一帧原图像到canvas中\n  const nartualCanvas = document.createElement('canvas')\n  const nartualCtx = nartualCanvas.getContext('2d')\n  nartualCanvas.width = image.naturalWidth\n  nartualCanvas.height = image.naturalHeight\n  nartualCtx.putImageData(frameData, 0, 0)\n\n  // 新建一个canvas，宽高设为目标宽高，并进行画布缩放\n  const scaleCanvas = document.createElement('canvas')\n  const scaleCtx = scaleCanvas.getContext('2d')\n  scaleCanvas.width = image.width\n  scaleCanvas.height = image.height\n  const ratio = image.width / image.naturalWidth\n  scaleCtx.scale(ratio, ratio)\n  // 将保存的原图像使用drawImage绘制到新画布上\n  scaleCtx.drawImage(nartualCanvas, 0, 0)\n\n  return scaleCtx.getImageData(0, 0, image.width, image.height)\n}\n\n/**\n * 获取gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction gif(image) {\n  const data = datauri.decode(image.src)\n  const { width: rawWidth, height: rawHeight, frames } = gifParser(data)\n  const framesData = []\n  for(let i = 0; i < frames.length; i++) {\n    const frameData = new ImageData(frames[i].data, rawWidth, rawHeight)\n    framesData.push({\n      data: zipFrameData(frameData, image),\n      delay: frames[i].delay\n    })\n  }\n  return framesData\n}\n\n/**\n * 获取非gif图像信息\n *\n * @param {HTMLImageElement} image\n * @returns\n */\nfunction noGif(image) {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  const ratio = image.width / image.naturalWidth\n  // 将画布内容缩放到与当前图像一致\n  canvas.width = image.width\n  canvas.height = image.height\n  ctx.scale(ratio, ratio)\n  // 绘制当前图像到canvas上\n  ctx.drawImage(image, 0, 0)\n  const imageData = ctx.getImageData(0, 0, image.width, image.height)\n  return [{ data: imageData, delay: null }]\n}\n\n\n/**\n * 获取图像信息\n *\n * @export\n * @param {HTMLImageElement} image\n * @param {File} file\n * @returns\n */\nexport function getImageDatas(image, file) {\n  const type = getImageType(file.type)\n  if (type === 'GIF') {\n    return gif(image)\n  } else {\n    return noGif(image)\n  }\n}\n","/**\n * datauri 转 ArrayBuffer\n * https://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata\n *\n * @export\n * @param {string} uri\n * @returns\n */\nexport function decode(uri) {\n  // 找到分割 metadata 和 data 的逗号位置\n  const commaIndex = uri.indexOf(',')\n\n  const meta = uri.substring(5, commaIndex).split(';')  // 头部信息 metadata\n  const type = meta[0] || 'text/plain'\n\n  const data = uri.substring(commaIndex + 1)  // 内容信息\n  let byteString\n  if (meta.indexOf('base64') >= 0) {\n    byteString = atob(data)\n  } else {\n    byteString = unescape(data)\n  }\n  const buffer = new Uint8Array(byteString.length)\n  for (let i = 0; i < byteString.length; i++) {\n    buffer[i] = byteString.charCodeAt(i)\n  }\n  buffer.type = type\n\n  return buffer\n}\n","import React from 'react'\nimport Divide from './component/Divide'\nimport Button from './component/Button'\nimport FramesModal from './component/FramesModal'\nimport TransformSetting from './component/TransformSetting'\nimport Row from './component/Row'\nimport ImagePreviewUpload from './component/ImagePreviewUpload'\nimport { transformImageToText } from './tools/imageToText'\nimport { getImageDatas } from './tools/imageParser'\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      transformWidth: '',\n      transformResult: [],\n      rawImage: null,\n      file: null\n    }\n    this.imagePreview = React.createRef()\n    this.framesModal = React.createRef()\n  }\n\n  setImageAndFile = (rawImage, file) => {\n    this.setState({rawImage, file})\n  }\n\n  setTransformType = (ev) => {\n    this.setState({\n      transformType: ev.target.value\n    })\n  }\n\n  setTransformWidth = (ev) => {\n    const value = ev.target.value\n    // 退格到无数字时，设置为0\n    const nextNumber = value.length ? parseInt(value, 10) : 0\n    // 值为非数字时，直接返回\n    if (isNaN(nextNumber)) {\n      return\n    }\n    this.setState({\n      // 设置为字符串，防止出现0开头数字的不正确显示\n      transformWidth: nextNumber.toString()\n    })\n  }\n\n  rescale = () => {\n    this.imagePreview.current.scaleImageContainer()\n  }\n\n  /**\n   * 图片转字符\n   *\n   * @memberof App\n   */\n  transform = () => {\n    const file = this.state.file\n    if (!file) {\n      return\n    }\n    /**\n     * @type {HTMLImageElement}\n     */\n    const image = this.imagePreview.current.getCurrentImage()\n    const framesData = getImageDatas(image, file)\n    framesData.forEach(frameData => {\n      frameData.text = transformImageToText(frameData.data)\n    })\n    this.setState({\n      transformResult: framesData\n    }, () => {\n      this.framesModal.current.open()\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1 className=\"text-center\">图片转字符画工具</h1>\n        </header>\n        <Divide/>\n        <Row className=\"transform-settings-wrapper\">\n          <TransformSetting label=\"目标图片宽度:\" labelFor=\"transform-size\">\n            <input type=\"number\" id=\"transform-size\" className=\"transform-size-input\" name=\"transform-size\" value={this.state.transformWidth} onChange={this.setTransformWidth} />\n          </TransformSetting>\n          {/* <TransformSetting label=\"是否着色:\" labelFor=\"transform-color\">\n            <input type=\"checkbox\" id=\"transform-color\" className=\"transform-color-checkbox\" name=\"transform-color\" value={this.state.transformColor} onChange={this.setTransformColor} />\n          </TransformSetting> */}\n          <Button onClick={this.rescale}>重新缩放</Button>\n          <Button onClick={this.transform}>开始转化</Button>\n        </Row>\n        <Divide/>\n        <Row>\n          <ImagePreviewUpload file={this.state.file} image={this.state.rawImage} setImageAndFile={this.setImageAndFile} previewWidth={parseInt(this.state.transformWidth)} ref={this.imagePreview}></ImagePreviewUpload>\n        </Row>\n        <FramesModal ref={this.framesModal} frames={this.state.transformResult} file={this.state.file} />\n      </div>\n    )\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './style/normalize.css'\nimport './style/index.css'\n\nif (module.hot) {\n  module.hot.accept()\n}\n\nReactDOM.render(<App />, document.getElementById('app'))\n"],"sourceRoot":""}